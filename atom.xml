<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CyannyLive</title>
  <subtitle>ML and Big Data</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cyanny.com/"/>
  <updated>2018-08-09T06:29:55.000Z</updated>
  <id>http://www.cyanny.com/</id>
  
  <author>
    <name>Cyanny Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Performance Toolbox</title>
    <link href="http://www.cyanny.com/2018/08/04/java-performance-notes-monitoring-tools/"/>
    <id>http://www.cyanny.com/2018/08/04/java-performance-notes-monitoring-tools/</id>
    <published>2018-08-04T10:24:34.000Z</published>
    <updated>2018-08-09T06:29:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>I learned <strong>The Java Performance Definitive Guide[chapter 3]</strong> on this weekend, here is a brief summary about Java Performance Toolbox.</p>
<h2 id="System-Monitoring-Tools"><a href="#System-Monitoring-Tools" class="headerlink" title="System Monitoring Tools"></a>System Monitoring Tools</h2><h3 id="1-CPU-Usage"><a href="#1-CPU-Usage" class="headerlink" title="1. CPU Usage"></a>1. CPU Usage</h3><p>vmstat: Report virtual memory statistics, vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity<br>vmstat [options] [delay [count]]<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vmstat 1</div><div class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</div><div class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class="line"> 0  0      0 71322688 314388 127644112    0    0     0     7    0    0  9  1 90  0  0</div><div class="line"> 0  0      0 71322816 314388 127644112    0    0     0     0 5590 7874  1  0 99  0  0</div><div class="line"> 0  0      0 71322592 314388 127644144    0    0     0     0 5418 7226  0  0 99  0  0</div><div class="line"> 0  0      0 71323208 314388 127644144    0    0     0    12 4952 7199  0  0 100  0  0</div><div class="line"> 0  0      0 71323600 314388 127644144    0    0     0   104 5253 7262  1  0 99  0  0</div></pre></td></tr></table></figure></p>
<p>Tips:</p>
<ul>
<li>CPU time is the first thing to examine when looking at performance of an application.</li>
<li>The goal in optimizing code is to drive the CPU usage up (for a shorter period of time), not down.</li>
<li>Understand why CPU usage is low before diving in and attempting to tune an application.</li>
</ul>
<h3 id="2-Disk-Usage"><a href="#2-Disk-Usage" class="headerlink" title="2. Disk Usage"></a>2. Disk Usage</h3><p>iostat: Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions.</p>
<ul>
<li>%user: Show the percentage of CPU utilization that occurred while executing at the user level (application).</li>
<li>%system: Show the percentage of CPU utilization that occurred while executing at the system level (kernel).</li>
<li>rrqm/s: The number of read requests merged per second that were queued to the device</li>
<li>avgrq-sz: The average size (in sectors) of the requests that were issued to the device</li>
<li>%util: Percentage of elapsed time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100%<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iostat -xm 5</div><div class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</div><div class="line">           9.40    0.00    0.52    0.01    0.00   90.07</div><div class="line"></div><div class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rMB/s    wMB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</div><div class="line">sda               0.00     0.58    0.15    4.49     0.00     0.14    61.65     1.31  283.55    0.22  292.90   0.06   0.03</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-Network-Usage"><a href="#3-Network-Usage" class="headerlink" title="3. Network Usage"></a>3. Network Usage</h3><p>netstat: Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -s</div></pre></td></tr></table></figure></p>
<p>The book use <code>nicstat</code>, which is not built-in Linux server, it can be installed by yum.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nicstat 5</div></pre></td></tr></table></figure></p>
<p>Be careful that the bandwidth is measured in bits per second, but tools generally report bytes per second</p>
<h2 id="Java-Monitoring-Tools"><a href="#Java-Monitoring-Tools" class="headerlink" title="Java Monitoring Tools"></a>Java Monitoring Tools</h2><h3 id="1-Basic-JVM-INFO"><a href="#1-Basic-JVM-INFO" class="headerlink" title="1. Basic JVM INFO"></a>1. Basic JVM INFO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jcmd process_id VM.uptime</div><div class="line">jcmd process_id VM.system_properties</div><div class="line">jcmd process_id VM.version</div><div class="line">jcmd process_id VM.command_line</div><div class="line">jinfo -sysprops process_id</div><div class="line">jinfo -flags process_id</div><div class="line">jinfo -flag PrintGCDetails process_id</div></pre></td></tr></table></figure>
<p>Some tuning flags can be set by jcmd and jinfo in command line, such as manageable options and C2 diagnostic (the flag provides diagnostic output for the compiler engineers to understand how the compiler is functioning).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jinfo -flag -PrintGCDetails process_id  # turns off PrintGCDetails</div><div class="line">jinfo -flag PrintGCDetails process_id</div></pre></td></tr></table></figure></p>
<p>tips:</p>
<ul>
<li>jcmd can be used to find the basic VM information—include the value of all the tuning flags—for a running application.</li>
<li>Default flag values can be found by including -XX:+PrintFlagsFinal on a command line. This is useful for determining the default ergonomic settings of flags on a particular platform.</li>
<li>jinfo is useful for inspecting (and in some cases changing) individual flags.</li>
</ul>
<h3 id="2-Thread-Info"><a href="#2-Thread-Info" class="headerlink" title="2. Thread Info"></a>2. Thread Info</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jstack process_id</div><div class="line">jcmd process_id Thread.print</div></pre></td></tr></table></figure>
<h3 id="3-Class-Info"><a href="#3-Class-Info" class="headerlink" title="3. Class Info"></a>3. Class Info</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jconsole</div><div class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</div></pre></td></tr></table></figure>
<h3 id="4-Heap-Info"><a href="#4-Heap-Info" class="headerlink" title="4. Heap Info"></a>4. Heap Info</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jmap -heap process_id</div><div class="line">jmap -dump:[live,] format=b, file=filename process_id</div><div class="line">jhat -port 7000 dump_file</div></pre></td></tr></table></figure>
<p>Another way, add hprof option to java process</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">java -agentlib:hprof=help</div><div class="line">HPROF: Heap and CPU Profiling Agent (JVMTI Demonstration Code)</div><div class="line">hprof usage: java -agentlib:hprof=[help]|[&lt;option&gt;=&lt;value&gt;, ...]</div><div class="line">Option Name and Value  Description                    Default</div><div class="line">---------------------  -----------                    -------</div><div class="line">heap=dump|sites|all    heap profiling                 all</div><div class="line">cpu=samples|times|old  CPU usage                      off</div><div class="line">monitor=y|n            monitor contention             n</div><div class="line">format=a|b             text(txt) or binary output     a</div><div class="line">file=&lt;file&gt;            write data to file             java.hprof[&#123;.txt&#125;]</div><div class="line">net=&lt;host&gt;:&lt;port&gt;      send data over a socket        off</div><div class="line">depth=&lt;size&gt;           stack trace depth              4</div><div class="line">interval=&lt;ms&gt;          sample interval in ms          10</div><div class="line">cutoff=&lt;value&gt;         output cutoff point            0.0001</div><div class="line">lineno=y|n             line number in traces?         y</div><div class="line">thread=y|n             thread in traces?              n</div><div class="line">doe=y|n                dump on exit?                  y</div><div class="line">msa=y|n                Solaris micro state accounting n</div><div class="line">force=y|n              force output to &lt;file&gt;         y</div><div class="line">verbose=y|n            print messages about dumps     y</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-agentlib:hprof=cpu=samples,lineno=y # for cpu</div><div class="line">-agentlib:hprof=heap=sites,lineno=y # for heap</div></pre></td></tr></table></figure>
<p>Some notes:</p>
<ul>
<li>heap=sites, sites is a sorted list of allocation sites.  This identifies the most heavily allocated object types, and the TRACE at which those allocations occurred.</li>
<li>cpu=samples,  is a statistical profile of program execution.  The VM  periodically samples all running threads, and assigns a quantum to active TRACEs in those threads.</li>
<li>cpu=time, is a profile of program execution obtained by measuring the time spent in individual methods (excluding the time spent in callees), as well as by counting the number of times each method is called</li>
</ul>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/samples/hprof.html" target="_blank" rel="external">hprof ref</a></p>
<h3 id="5-Heap-Dump-Processing"><a href="#5-Heap-Dump-Processing" class="headerlink" title="5. Heap Dump Processing"></a>5. Heap Dump Processing</h3><p>Heap dumps can be captured from the jvisualvm GUI, or from the command line using jcmd or jmap.<br>Or you can use Eclipse Memory Analzyer Tool.</p>
<h2 id="Java-Profiling-Tools"><a href="#Java-Profiling-Tools" class="headerlink" title="Java Profiling Tools"></a>Java Profiling Tools</h2><h3 id="1-Tools-types"><a href="#1-Tools-types" class="headerlink" title="1. Tools types"></a>1. Tools types</h3><ul>
<li><p>Sampling profilers<br>Sampling-based profilers are the most common profiler. There may be error in sampling profiler’s result. The way to minimize these errors is to profile over a longer period of time, and to reduce the time interval between samples.</p>
</li>
<li><p>Instrumented profilers<br>Instrumented profilers yield more information about an application, but can possibly have a greater effect on the application than a sampling profiler.<br>Instrumented profilers should be set up to instrument small sections of the code, a few classes or packages. That limits their impact on the application’s performance.</p>
</li>
</ul>
<h2 id="2-JMC-Java-Mission-Control"><a href="#2-JMC-Java-Mission-Control" class="headerlink" title="2. JMC(Java Mission Control)"></a>2. JMC(Java Mission Control)</h2><p>It’s a great profiling tool built-in JDK(jdk 7 or higher). On local machine, just type <code>jmc</code> command, the jmc UI will show.<br><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1ftz2nfllbmj21kw0xz4j5.jpg" alt="jmc ui"></p>
<p>Then how to connect jmc to remote Linux server.</p>
<ul>
<li><p>Firstly, add jmx configurations to Linux java process</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=8091 -Dcom.sun.management.jmxremote.rmi.port=8091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false</div></pre></td></tr></table></figure>
</li>
<li><p>Secondly, config local jmc connection<br>fill the server and port, click Finished. That’s all.<br><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1ftz2nkhtqvj20sw0pcwis.jpg" alt="config local jmc connection"></p>
</li>
</ul>
<p><a href="https://docs.oracle.com/javacomponents/jmc-5-5/jmc-user-guide/toc.htm" target="_blank" rel="external">jmc help guides</a></p>
<p><em>Use JMC the dump files:</em><br>firstly, add <code>-XX:+UnlockCommercialFeatures -XX:+FlightRecorder</code> to application<br>secondly, type these commands:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jcmd process_id JFR.start</div><div class="line">jcmd process_id JFR.dump filename=path</div><div class="line">jcmd process_id JFR.stop</div></pre></td></tr></table></figure></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li>System monitoring tools: vmstat, iostat, netstat</li>
<li>Java built-in tools: jinfo, jcmd, jmap, jhat, jstat, jconsole, jvisualvm, jmc, jhprof</li>
<li>No perfert tools for everything, when do profiling work, use right tools right applications</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.amazon.com/Java-Performance-Definitive-Guide-Getting/dp/1449358454/ref=sr_1_1?ie=UTF8&amp;qid=1533475568&amp;sr=8-1&amp;keywords=java+performance+definitive+guide" target="_blank" rel="external">Java Performance: The Definitive Guide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I learned &lt;strong&gt;The Java Performance Definitive Guide[chapter 3]&lt;/strong&gt; on this weekend, here is a brief summary about Java Performance Toolbox.&lt;/p&gt;
&lt;h2 id=&quot;System-Monitoring-Tools&quot;&gt;&lt;a href=&quot;#System-Monitoring-Tools&quot; class=&quot;headerlink&quot; title=&quot;System Monitoring Tools&quot;&gt;&lt;/a&gt;System Monitoring Tools&lt;/h2&gt;&lt;h3 id=&quot;1-CPU-Usage&quot;&gt;&lt;a href=&quot;#1-CPU-Usage&quot; class=&quot;headerlink&quot; title=&quot;1. CPU Usage&quot;&gt;&lt;/a&gt;1. CPU Usage&lt;/h3&gt;&lt;p&gt;vmstat: Report virtual memory statistics, vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity&lt;br&gt;vmstat [options] [delay [count]]&lt;br&gt;
    
    </summary>
    
    
      <category term="java performance" scheme="http://www.cyanny.com/tags/java-performance/"/>
    
  </entry>
  
  <entry>
    <title>Big Data And ML Learning</title>
    <link href="http://www.cyanny.com/2018/07/16/big-data-expert/"/>
    <id>http://www.cyanny.com/2018/07/16/big-data-expert/</id>
    <published>2018-07-16T00:33:12.000Z</published>
    <updated>2018-08-05T13:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着工作的时间一天天过去，不禁会思考对未来的打算，工作的事情更多的是业务和效果，少有时间学习，自我的提升比起学校需要更多的self motivation. 一直都工作在大数据领域，现在虽然业务多些，方向也没有变化，还有了很多机器学习方面的实践。以下是我觉得自己很希望学习的书籍和要点:<br><a id="more"></a></p>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul>
<li>HBase Definitive Guide</li>
<li>Learning Apache Flink 比起Spark Streaming确实完善很多</li>
<li>Streaming Systems</li>
<li>High Performance Spark</li>
<li>Hadoop Definitive Guide，很早的时候看过一遍</li>
<li>Distributed Computing: Principles, Algorithms, and Systems</li>
<li>Spark源码</li>
<li>Spring Framework，很成熟服务端方案</li>
</ul>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>Hands on ML</li>
<li>Tensorflow官方Guide和源码</li>
<li>DL Learning Coursera</li>
<li>统计推断</li>
<li>数学之美</li>
<li>Coursera ML 课程的作业</li>
<li>Machine Learning: A Probabilistic Perspective</li>
<li>Deep Learning的书</li>
<li>西瓜书</li>
<li>统计学习方法</li>
<li>The elements of statistical learning</li>
<li>Rainforcement Learning</li>
</ul>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li>JVM虚拟机深入: Java Performance: The definitive guide</li>
<li>The C++ Programming Language 4th edition</li>
<li>Java并发编程</li>
<li>Designing Data Intensive Applications</li>
<li>Go programming</li>
<li>R programming</li>
<li>Mondern Operating System</li>
<li>算法，图论, 设计模式，代码大全, 计算机程序的构造与解释</li>
<li>Programming in Scala(review again)</li>
<li>High performance Python</li>
<li>Getting Starting with R</li>
<li>The implementation of functional language</li>
<li>Distributed Computing</li>
<li>Gradle, Maven</li>
<li>代码整洁，代码大全，程序员自我修养，重够</li>
</ul>
<h2 id="投资管理等"><a href="#投资管理等" class="headerlink" title="投资管理等"></a>投资管理等</h2><ul>
<li>经济学原理</li>
<li>心理学</li>
<li>产品：梁宁，听了她的课，学了很多概念，同时也推荐李善友的颠覆式创新</li>
<li>don’t make me think</li>
<li>Just for Fun: The Story of an Accidental Revolutionary</li>
<li>The Hacker Ethic: and the Spirit of the Information Age</li>
</ul>
<p>希望在未来2~3年年，能完成，今天年底，完成3~4个要点，今年上半年已经完成了<em>Hands on ML</em>，<em>Learning Apache Flink</em> 最近在学习Java Performance，Tensorflow和Deep Learning的Coursera课程，加油啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着工作的时间一天天过去，不禁会思考对未来的打算，工作的事情更多的是业务和效果，少有时间学习，自我的提升比起学校需要更多的self motivation. 一直都工作在大数据领域，现在虽然业务多些，方向也没有变化，还有了很多机器学习方面的实践。以下是我觉得自己很希望学习的书籍和要点:&lt;br&gt;
    
    </summary>
    
    
      <category term="learning" scheme="http://www.cyanny.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Books for 2018</title>
    <link href="http://www.cyanny.com/2018/01/20/great-books-for-2018/"/>
    <id>http://www.cyanny.com/2018/01/20/great-books-for-2018/</id>
    <published>2018-01-20T07:15:09.000Z</published>
    <updated>2018-01-20T07:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>One of my 2018 reservations is reading more books. Here I list some great books in my plan.</p>
<h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><ul>
<li>Machine Learning: A Probabilistic Perspective</li>
<li>Deap Learning(Ian，Goodfellow)</li>
<li>Pattern Recognition and Machine Learning(Christopher M Bishop)</li>
<li>The elements of statistic learning</li>
<li>Hands-On Machine Learning with Scikit-Learn and TensorFlow (in progress now)</li>
<li>Python Machine Learning</li>
<li>数学之美</li>
<li>统计学（复习）</li>
<li>统计学习方法</li>
<li>机器学习</li>
</ul>
<a id="more"></a>
<h2 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h2><ul>
<li>High Performance Spark(review again)</li>
<li>Spark The Definitive Guide</li>
<li>Kafka The Definitive Guide</li>
<li>Streaming Systems: The What, Where, When, and How of Large-Scale Data Processing</li>
<li>streaming data understanding the real time pipeline</li>
<li>Learning Spark Streaming</li>
<li>Learning Apache Flink</li>
<li>Stream processing with apache flink</li>
<li>Architecting HBase Applications</li>
<li>HBase Definitive Guide</li>
<li>Designing Data-Intensive Applications</li>
</ul>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul>
<li>Programming in Scala(review again)</li>
<li>The C++ Programming Language 4th edition</li>
<li>High performance Python</li>
<li>Getting Starting with R</li>
</ul>
<h2 id="For-my-field"><a href="#For-my-field" class="headerlink" title="For my field"></a>For my field</h2><ul>
<li>Gis Fundamentals</li>
<li>Computing with Spatial Trajectories</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of my 2018 reservations is reading more books. Here I list some great books in my plan.&lt;/p&gt;
&lt;h2 id=&quot;Machine-Learning&quot;&gt;&lt;a href=&quot;#Machine-Learning&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning&quot;&gt;&lt;/a&gt;Machine Learning&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Machine Learning: A Probabilistic Perspective&lt;/li&gt;
&lt;li&gt;Deap Learning(Ian，Goodfellow)&lt;/li&gt;
&lt;li&gt;Pattern Recognition and Machine Learning(Christopher M Bishop)&lt;/li&gt;
&lt;li&gt;The elements of statistic learning&lt;/li&gt;
&lt;li&gt;Hands-On Machine Learning with Scikit-Learn and TensorFlow (in progress now)&lt;/li&gt;
&lt;li&gt;Python Machine Learning&lt;/li&gt;
&lt;li&gt;数学之美&lt;/li&gt;
&lt;li&gt;统计学（复习）&lt;/li&gt;
&lt;li&gt;统计学习方法&lt;/li&gt;
&lt;li&gt;机器学习&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="learning" scheme="http://www.cyanny.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>ppmml publish today</title>
    <link href="http://www.cyanny.com/2017/12/29/ppmml-publish/"/>
    <id>http://www.cyanny.com/2017/12/29/ppmml-publish/</id>
    <published>2017-12-29T11:42:02.000Z</published>
    <updated>2017-12-29T12:16:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>On the last day before the New Year Holiday, ppmml is published.<br><a href="https://github.com/lgrcyanny/ppmml" target="_blank" rel="external">ppmml</a> is a python library for converting machine learning models to pmml file. ppmml wraps jpmml libraries and provides clean interface.</p>
<h1 id="What-is-pmml-file"><a href="#What-is-pmml-file" class="headerlink" title="What is pmml file?"></a>What is pmml file?</h1><p>PMML - “Predictive Model Markup Language”, which is a standard for XML documents which express trained instances of analytic models.<br>Various platforms adopt pmml as machine learning model standard, including IBM, SAS, Microsoft, Spark, KNIME etd.<a href="http://dmg.org/pmml/products.html" target="_blank" rel="external">pmml-platforms</a></p>
<p><a href="https://github.com/jpmml" target="_blank" rel="external">jpmml</a> has developed pmml model library and supported models of spark, xgboost, tensorflow, sklearn, lightgbm and R. All of these libraries are separated and written in java.<br>ppmml wraps jpmml libraries and proved a simple and easy-to-use API for pmml files transformation.<br>0.0.1 version supports sklearn, tensorflow, spark, lightgbm, xgboost and R models. All models supported by jpmml are supported by ppmml. Common machine learning algorithms are supported, such as Decision Tree, Logistic Regression, GBDT, Random Forest, KMeans. However, Deep Learning support is not ready.</p>
<a id="more"></a>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --default-timeout=10000 -i https://pypi.anaconda.org/lgrcyanny/simple ppmml</div></pre></td></tr></table></figure>
<p><a href="https://anaconda.org/lgrcyanny/ppmml" target="_blank" rel="external">ppmml conda package</a></p>
<h1 id="Geting-Started"><a href="#Geting-Started" class="headerlink" title="Geting Started"></a>Geting Started</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</div><div class="line"><span class="keyword">import</span> ppmml</div><div class="line"><span class="comment"># load data and train iris datasets</span></div><div class="line">(X, y) = load_iris(<span class="keyword">True</span>)</div><div class="line">lr = LogisticRegression(tol=<span class="number">1e-5</span>)</div><div class="line">lr.fit(X, y)</div><div class="line">joblib.dump(lr, <span class="string">"lr.pkl.z"</span>, compress = <span class="number">9</span>)</div><div class="line"></div><div class="line"><span class="comment"># to pmml file</span></div><div class="line">ppmml.to_pmml(<span class="string">"lr.pkl.z"</span>, <span class="string">"lr.pmml"</span>, model_type=<span class="string">'sklearn'</span>)</div><div class="line"></div><div class="line"><span class="comment"># prepare test data</span></div><div class="line">df = pd.DataFrame(X)</div><div class="line">df.columns = [<span class="string">'x1'</span>, <span class="string">'x2'</span>, <span class="string">'x3'</span>, <span class="string">'x4'</span>]</div><div class="line">df.to_csv(<span class="string">'test.csv'</span>, header=<span class="keyword">True</span>, index=<span class="keyword">False</span>)</div><div class="line"><span class="comment"># predit with pmml file, a simple predict API based on jpmml-evaluator</span></div><div class="line">ppmml.predict(<span class="string">'lr.pmml'</span>, <span class="string">'test.csv'</span>, <span class="string">'predict.csv'</span>)</div></pre></td></tr></table></figure>
<p><a href="https://github.com/lgrcyanny/ppmml" target="_blank" rel="external">ppmml github</a></p>
<hr>
<p><strong>Notes:</strong><br>It’s the last work of this year<br>In memory of the last time here, wish for a great step in 2018<br>May the force be with you</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;On the last day before the New Year Holiday, ppmml is published.&lt;br&gt;&lt;a href=&quot;https://github.com/lgrcyanny/ppmml&quot;&gt;ppmml&lt;/a&gt; is a python library for converting machine learning models to pmml file. ppmml wraps jpmml libraries and provides clean interface.&lt;/p&gt;
&lt;h1 id=&quot;What-is-pmml-file&quot;&gt;&lt;a href=&quot;#What-is-pmml-file&quot; class=&quot;headerlink&quot; title=&quot;What is pmml file?&quot;&gt;&lt;/a&gt;What is pmml file?&lt;/h1&gt;&lt;p&gt;PMML - “Predictive Model Markup Language”, which is a standard for XML documents which express trained instances of analytic models.&lt;br&gt;Various platforms adopt pmml as machine learning model standard, including IBM, SAS, Microsoft, Spark, KNIME etd.&lt;a href=&quot;http://dmg.org/pmml/products.html&quot;&gt;pmml-platforms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jpmml&quot;&gt;jpmml&lt;/a&gt; has developed pmml model library and supported models of spark, xgboost, tensorflow, sklearn, lightgbm and R. All of these libraries are separated and written in java.&lt;br&gt;ppmml wraps jpmml libraries and proved a simple and easy-to-use API for pmml files transformation.&lt;br&gt;0.0.1 version supports sklearn, tensorflow, spark, lightgbm, xgboost and R models. All models supported by jpmml are supported by ppmml. Common machine learning algorithms are supported, such as Decision Tree, Logistic Regression, GBDT, Random Forest, KMeans. However, Deep Learning support is not ready.&lt;/p&gt;
    
    </summary>
    
    
      <category term="machine learning" scheme="http://www.cyanny.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>How to Use Scala UDF and UDAF in PySpark</title>
    <link href="http://www.cyanny.com/2017/09/15/spark-use-scala-udf-udaf-in-pyspark/"/>
    <id>http://www.cyanny.com/2017/09/15/spark-use-scala-udf-udaf-in-pyspark/</id>
    <published>2017-09-15T03:16:33.000Z</published>
    <updated>2017-09-17T05:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark DataFrame API provides efficient and easy-to-use operations to do analysis on distributed collection of data. Many users love the Pyspark API, which is more usable than scala API. Sometimes when we use UDF in pyspark, the performance will be a problem. How about implementing these UDF in scala, and call them in pyspark? BTW, in spark 2.0, UDAF can only be defined in scala, and how to use it in pyspark? Let’s have a try~<br><a id="more"></a></p>
<h2 id="Use-Scala-UDF-in-PySpark"><a href="#Use-Scala-UDF-in-PySpark" class="headerlink" title="Use Scala UDF in PySpark"></a>Use Scala UDF in PySpark</h2><p><strong>1. define scala udf</strong></p>
<p>Suppose we want to calculate string length, lets define it in scala UDF.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.<span class="type">UserDefinedFunction</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringLength</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getStringLength</span></span>(s: <span class="type">String</span>) = s.length</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getFun</span></span>(): <span class="type">UserDefinedFunction</span> = udf(getStringLength _)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. use udf in python</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> Column</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_java_column</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_seq</div><div class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> col</div><div class="line"> </div><div class="line">spark = SparkSession.builder.appName(<span class="string">"scala_udf_test"</span>).getOrCreate()</div><div class="line">sc = spark.sparkContext</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_length</span><span class="params">(col)</span>:</span></div><div class="line">    _string_length = sc._jvm.com.learning.StringLength.getFun()</div><div class="line">    <span class="keyword">return</span> Column(_string_length.apply(_to_seq(sc, [col], _to_java_column)))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">()</span>:</span></div><div class="line">    rows = [</div><div class="line">        (<span class="string">"k1"</span>, <span class="string">"aaa"</span>),</div><div class="line">        (<span class="string">"k2"</span>, <span class="string">"dd"</span>),</div><div class="line">        (<span class="string">"k3"</span>, <span class="string">"cc"</span>),</div><div class="line">        (<span class="string">"k4"</span>, <span class="string">"eee"</span>),</div><div class="line">    ]</div><div class="line">    df = spark.createDataFrame(rows, [<span class="string">'key'</span>, <span class="string">'value'</span>])</div><div class="line">    df.show(<span class="number">50</span>)</div><div class="line">    df.select(col(<span class="string">"key"</span>), string_length(col(<span class="string">"value"</span>))).show()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    process()</div></pre></td></tr></table></figure>
<p><strong>3. submit the app</strong></p>
<p>compile the scala code and submit python files with –jars</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/spark-submit --jars testing/learning<span class="number">-1.0</span><span class="number">.0</span>-<span class="type">SNAPSHOT</span>.jar udf_test.py</div></pre></td></tr></table></figure>
<p>the output would be:</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>k1</td>
<td>3</td>
</tr>
<tr>
<td>k2</td>
<td>2</td>
</tr>
<tr>
<td>k3</td>
<td>2</td>
</tr>
<tr>
<td>k4</td>
<td>3</td>
</tr>
</tbody>
</table>
<p><strong>4. performance analysis</strong></p>
<p>let’s explain the scala UDF in Python<br><img src="http://wx1.sinaimg.cn/mw690/761b7938ly1fjmeol1jg8j20s405odim.jpg" alt="scala udf physical plan"><br>the Project Plan is Scala UDF</p>
<p>and if we implement Python UDF as follows:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">py_slen = udf(<span class="keyword">lambda</span> s: len(s), IntegerType())</div><div class="line">df_with_python_udf = (df.select(col(<span class="string">"key"</span>), py_slen(<span class="string">"value"</span>).alias(<span class="string">"slen"</span>)).orderBy(col(<span class="string">"slen"</span>).desc()))</div></pre></td></tr></table></figure>
<p>the Python plan is:<br><img src="http://wx4.sinaimg.cn/mw690/761b7938ly1fjmeofgzbmj210k06igot.jpg" alt="python udf physical plan"><br>the UDF plan is different, which is BatchEvalPython.<br>It can prove that when use scala UDF in python, the evaluation is in JVM and data will not exchange with Python worker. And the performance should be improved.</p>
<p>I evaluated the performance in local environment with 4cores and 2GB memory, and generated 10million rows for each test, the result is as follows:<br><img src="http://wx2.sinaimg.cn/mw690/761b7938ly1fjmer43xfnj20kw0ckt8z.jpg" alt="scala vs python string len udf"><br><strong>Scala UDF is 1.89 times Python UDF</strong></p>
<p><strong>And then I implemented another UDF in Scala and Python with regex string parsing</strong>, the performance is<br><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1fjmeopknh4j20a0061748.jpg" alt="scala vs python string regex parsing"></p>
<p><strong>Scala udf is 2.23 times Python REGEX String Parsing UDF</strong></p>
<p>the Scala UDF is defined as follows:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  org.apache.spark.sql.functions._</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Created by lgrcyanny on 17/9/13.</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringParse</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> <span class="type">STRING_PATTERN</span> = <span class="string">""</span><span class="string">"(a.*b)"</span><span class="string">""</span>.r</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parseString</span></span>(str: <span class="type">String</span>): <span class="type">String</span> = &#123;</div><div class="line">    <span class="keyword">val</span> matched = <span class="type">STRING_PATTERN</span>.findFirstMatchIn(str)</div><div class="line">    <span class="keyword">if</span> (matched.isEmpty) &#123;</div><div class="line">      <span class="string">""</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      matched.get.group(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getFun</span></span>() = udf(parseString _ )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Python string parse UDF  vs Scala UDF:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> Column</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_java_column</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_seq</div><div class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> col</div><div class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> udf</div><div class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> length</div><div class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType</div><div class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> IntegerType</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_word</span><span class="params">(length)</span>:</span></div><div class="line">    <span class="string">"""get random word for generate rows"""</span></div><div class="line">    letters = string.ascii_lowercase</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([random.choice(letters) <span class="keyword">for</span> i <span class="keyword">in</span> range(length)])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_rows</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""generate rows in key value pair"""</span></div><div class="line">    <span class="comment"># generate rows</span></div><div class="line">    letters = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></div><div class="line">    rows = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        id = random.randint(<span class="number">0</span>, <span class="number">100</span>)</div><div class="line">        slen = random.randint(<span class="number">0</span>, <span class="number">20</span>)</div><div class="line">        word = random_word(slen)</div><div class="line">        rows.append((id, letters))</div><div class="line">    <span class="keyword">return</span> rows</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_parse</span><span class="params">(col)</span>:</span></div><div class="line">    <span class="string">"""scala udf parse string"""</span></div><div class="line">    _string_parse = sc._jvm.com.learning.StringParse.getFun()</div><div class="line">    <span class="keyword">return</span> Column(_string_parse.apply(_to_seq(sc, [col], _to_java_column)))</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_regex_udf</span><span class="params">(n=<span class="number">1000</span>)</span>:</span></div><div class="line">    <span class="string">"""test udf with regex parse"""</span></div><div class="line">    rows = generate_rows(n)</div><div class="line">    df = spark.createDataFrame(rows, [<span class="string">'key'</span>, <span class="string">'value'</span>])</div><div class="line">    df.show(<span class="number">20</span>)</div><div class="line">    pattern = re.compile(<span class="string">r"(a.*b)"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_string</span><span class="params">(str)</span>:</span></div><div class="line">        <span class="string">"""parse string with python regex"""</span></div><div class="line">        matched = re.search(pattern, str)</div><div class="line">        <span class="keyword">if</span> matched:</div><div class="line">            <span class="keyword">return</span> matched.group(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    py_parse_str = udf(parse_string, StringType())</div><div class="line">    start_time = time.time()</div><div class="line">    df_with_python_udf = (df.select(col(<span class="string">"key"</span>), py_parse_str(col(<span class="string">"value"</span>)).alias(<span class="string">"parsed_value"</span>))</div><div class="line">                          .filter(length(col(<span class="string">"parsed_value"</span>)) &gt; <span class="number">0</span>))</div><div class="line">    df_with_python_udf.explain(<span class="keyword">True</span>)</div><div class="line">    df_with_python_udf.show()</div><div class="line">    print(<span class="string">"matched rows: &#123;&#125;"</span>.format(df_with_python_udf.count()))</div><div class="line">    print(<span class="string">"duration for python regex parse: &#123;&#125;s"</span>.format(time.time() - start_time))</div><div class="line"></div><div class="line">    start_time = time.time()</div><div class="line">    df_with_scala_udf = (df.select(col(<span class="string">"key"</span>), string_parse(col(<span class="string">"value"</span>)).alias(<span class="string">"parsed_value"</span>))</div><div class="line">                          .filter(length(col(<span class="string">"parsed_value"</span>)) &gt; <span class="number">0</span>))</div><div class="line">    df_with_python_udf.explain(<span class="keyword">True</span>)</div><div class="line">    df_with_scala_udf.show()</div><div class="line">    print(<span class="string">"matched rows: &#123;&#125;"</span>.format(df_with_scala_udf.count()))</div><div class="line">    print(<span class="string">"duration for scala regex parse: &#123;&#125;s"</span>.format(time.time() - start_time))</div></pre></td></tr></table></figure>
<p><strong>5. Conclusion</strong></p>
<p>Databricks used to give a performance for Python vs Scala DataFrame and RDD API:<br><img src="http://wx2.sinaimg.cn/mw690/761b7938ly1fjmeo7vk38j210c0fy48j.jpg" alt="databricks performance"></p>
<p>the blog is <a href="https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html" target="_blank" rel="external">here</a>.<br>The performance is a running group-aggregation on 10 million integer pairs on a single machince. The Scala DF is almost 5 times Python lambda function in RDD Python.</p>
<p>Even though, the Scala UDF is not 5 times Python UDF, about 2 times in my test, using scala UDF can improve performance indeed.</p>
<h2 id="Use-Scala-UDAF-in-PySpark"><a href="#Use-Scala-UDAF-in-PySpark" class="headerlink" title="Use Scala UDAF in PySpark"></a>Use Scala UDAF in PySpark</h2><p>UDAF now only supports defined in Scala and Java(spark 2.0)</p>
<p><strong>1. define scala UDAF</strong></p>
<p>when define UDAF, it must extend class <code>UserDefinedAggregateFunction</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.&#123;<span class="type">MutableAggregationBuffer</span>, <span class="type">UserDefinedAggregateFunction</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">ArrayType</span>, <span class="type">DataType</span>, <span class="type">StringType</span>, <span class="type">StructType</span>&#125;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">GroupConcat</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">"s"</span>, <span class="type">StringType</span>)</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">"buff"</span>, <span class="type">ArrayType</span>(<span class="type">StringType</span>))</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">StringType</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    buffer.update(<span class="number">0</span>, <span class="type">ArrayBuffer</span>.empty[<span class="type">String</span>])</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (!input.isNullAt(<span class="number">0</span>)) &#123;</div><div class="line">      buffer.update(<span class="number">0</span>, buffer.getSeq[<span class="type">String</span>](<span class="number">0</span>) :+ input.getString(<span class="number">0</span>))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    buffer1.update(<span class="number">0</span>, buffer1.getSeq[<span class="type">String</span>](<span class="number">0</span>) ++ buffer2.getSeq[<span class="type">String</span>](<span class="number">0</span>))</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</div><div class="line">    buffer.getSeq[<span class="type">String</span>](<span class="number">0</span>).mkString(<span class="string">","</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. use UDAF in python</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> Column</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_java_column</div><div class="line"><span class="keyword">from</span> pyspark.sql.column <span class="keyword">import</span> _to_seq</div><div class="line"> </div><div class="line">spark = SparkSession.builder.appName(<span class="string">"scala_udf_test"</span>).getOrCreate()</div><div class="line">sc = spark.sparkContext</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_concat</span><span class="params">(col)</span>:</span></div><div class="line">    _groupConcat = sc._jvm.com.learning.GroupConcat.apply</div><div class="line">    <span class="keyword">return</span> Column(_groupConcat(_to_seq(sc, [col], _to_java_column)))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">()</span>:</span></div><div class="line">    rows = [</div><div class="line">        (<span class="string">"k1"</span>, <span class="string">"a"</span>),</div><div class="line">        (<span class="string">"k1"</span>, <span class="string">"b"</span>),</div><div class="line">        (<span class="string">"k1"</span>, <span class="string">"c"</span>),</div><div class="line">        (<span class="string">"k2"</span>, <span class="string">"d"</span>),</div><div class="line">        (<span class="string">"k3"</span>, <span class="string">"e"</span>),</div><div class="line">        (<span class="string">"k3"</span>, <span class="string">"f"</span>),</div><div class="line">    ]</div><div class="line">    df = spark.createDataFrame(rows, [<span class="string">'key'</span>, <span class="string">'value'</span>])</div><div class="line">    df.show(<span class="number">50</span>)</div><div class="line">    df.groupBy(<span class="string">"key"</span>).agg(group_concat(<span class="string">"value"</span>).alias(<span class="string">"concat"</span>)).show()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    process()</div></pre></td></tr></table></figure>
<p><strong>3. submit the app</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/spark-submit --jars testing/learning-1.0.0-SNAPSHOT.jar udf_test.py</div></pre></td></tr></table></figure>
<p>the output would be:</p>
<table>
<thead>
<tr>
<th>key</th>
<th>cancat</th>
</tr>
</thead>
<tbody>
<tr>
<td>k1</td>
<td>a,b,c</td>
</tr>
<tr>
<td>k2</td>
<td>d</td>
</tr>
<tr>
<td>k3</td>
<td>e,f</td>
</tr>
</tbody>
</table>
<p><strong>4. references</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/31640729/spark-sql-replacement-for-mysql-group-concat-aggregate-function" target="_blank" rel="external">spark-sql-replacement-for-mysql-group-concat-aggregate-function</a></li>
<li><a href="https://stackoverflow.com/questions/33233737/spark-how-to-map-python-with-scala-or-java-user-defined-functions" target="_blank" rel="external">spark-how-to-map-python-with-scala-or-java-user-defined-functions</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark DataFrame API provides efficient and easy-to-use operations to do analysis on distributed collection of data. Many users love the Pyspark API, which is more usable than scala API. Sometimes when we use UDF in pyspark, the performance will be a problem. How about implementing these UDF in scala, and call them in pyspark? BTW, in spark 2.0, UDAF can only be defined in scala, and how to use it in pyspark? Let’s have a try~&lt;br&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://www.cyanny.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>My First Commit to Spark Community</title>
    <link href="http://www.cyanny.com/2017/08/30/my-first-commit-to-spark-community/"/>
    <id>http://www.cyanny.com/2017/08/30/my-first-commit-to-spark-community/</id>
    <published>2017-08-30T01:50:37.000Z</published>
    <updated>2017-08-30T07:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been worked on spark related projects for almost 2 years. Today I submit a small patch to spark community. Hope to be a contributor~<br><a href="https://issues.apache.org/jira/browse/SPARK-21859" target="_blank" rel="external">https://issues.apache.org/jira/browse/SPARK-21859</a></p>
<a id="more"></a>
<p>It’s a PR about SparkFiles.get problem on yarn. Event though it’s a small patch, it’s a big progress for me to be an open source contributor.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been worked on spark related projects for almost 2 years. Today I submit a small patch to spark community. Hope to be a contributor~&lt;br&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-21859&quot;&gt;https://issues.apache.org/jira/browse/SPARK-21859&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spark" scheme="http://www.cyanny.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark streaming exactly-once analysis</title>
    <link href="http://www.cyanny.com/2017/08/27/spark-streaming-exactly-once-analysis/"/>
    <id>http://www.cyanny.com/2017/08/27/spark-streaming-exactly-once-analysis/</id>
    <published>2017-08-27T03:31:58.000Z</published>
    <updated>2017-10-24T07:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近对Spark Streaming接触比较多，主要关注的是streaming的准确性方面的需求, 忙了快半年，不禁想问为什么需要在exactly-once上花费这么多时间呢。streaming和batch的处理逻辑有什么区别呢？我觉得streaming更适合一些简单的过滤，能在100ms以内能算完的逻辑，而这些逻辑用batch也可以算完，为什么要streaming呢？用户们更希望的是更快。如果batch也能满足低延迟的需求，streaming系统就不需要了。而问题是为什么我们需要一个单独的streaming系统？<br><a id="more"></a></p>
<p> 生产环境中的版本是1.6，spark streaming的API在1.6上是基于RDD的DStream API，相比Structured Streaming，更稳定和成熟些。而我们的用户们，比较关心的是streaming系统</p>
<p> 开源里广泛使用的Streaming系统是Storm和Flink。Storm早期用record ack的方式保证at-least once，但没有提供exactly-once的保证，后面又有了storm trident.</p>
<h2 id="Spark-Streaming-Receiver模式没有exactly-once保证"><a href="#Spark-Streaming-Receiver模式没有exactly-once保证" class="headerlink" title="Spark Streaming Receiver模式没有exactly-once保证"></a>Spark Streaming Receiver模式没有exactly-once保证</h2><h2 id="Flink中的Exactly-Once保证"><a href="#Flink中的Exactly-Once保证" class="headerlink" title="Flink中的Exactly-Once保证"></a>Flink中的Exactly-Once保证</h2><h2 id="Storm的Eactly-Once保证"><a href="#Storm的Eactly-Once保证" class="headerlink" title="Storm的Eactly-Once保证"></a>Storm的Eactly-Once保证</h2><h3 id="Storm-Architecture"><a href="#Storm-Architecture" class="headerlink" title="Storm Architecture"></a>Storm Architecture</h3><p><img src="http://wx3.sinaimg.cn/mw690/761b7938ly1fizgwunfr6j21kw0n7e6n.jpg" alt="storm architecture"><br>以Storm on Yarn来说明Storm的架构：</p>
<ul>
<li>client将jar包通过yarn上传</li>
<li>在一台NodeManager上启动Nimbus，这是master节点，负责管理StormTopology, 分发task，心跳等</li>
<li>其他的NodeManager上启动Supervisor, 相当于slave节点，管理storm worker<ul>
<li>在每个supervisor上，可以启动多个worker进程，每个worker进程可以运行多个task，task是多线程的，由worker管理。这些task运行的就是Spout或Bolt定义的操作</li>
</ul>
</li>
<li>Zookeeper, Storm运行时状态的管理</li>
</ul>
<p>Storm方面算是简单调研，理解不是很深入，具体的参考<a href="http://storm.apache.org/releases/1.1.1/Setting-up-a-Storm-cluster.html" target="_blank" rel="external">官方文档</a></p>
<h3 id="Storm-exactly-once"><a href="#Storm-exactly-once" class="headerlink" title="Storm exactly-once"></a>Storm exactly-once</h3><p>####1. Storm Transactional Topologies(deprecated)<br>Strom 0.7版本中，实现了<a href="http://storm.apache.org/releases/1.1.1/Transactional-topologies.html" target="_blank" rel="external">transctional topologies</a>来保证exactly-once,<br><strong>1.transactional phrases 类似两阶段事务机制</strong></p>
<ul>
<li>The processing phase: this is the phase that can be done in parallel for many batches 可以并发执行计算partial result</li>
<li>The commit phase: The commit phases for batches are strongly ordered. So the commit for batch 2 is not done until the commit for batch 1 has been successful. 保证batch的提交是按顺序的</li>
</ul>
<p>来个直观的，用户需要构建的Topology如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MemoryTransactionalSpout spout = <span class="keyword">new</span> MemoryTransactionalSpout(DATA, <span class="keyword">new</span> Fields(<span class="string">"word"</span>), PARTITION_TAKE_PER_BATCH);</div><div class="line">TransactionalTopologyBuilder builder = <span class="keyword">new</span> TransactionalTopologyBuilder(<span class="string">"global-count"</span>, <span class="string">"spout"</span>, spout, <span class="number">3</span>);</div><div class="line">builder.setBolt(<span class="string">"partial-count"</span>, <span class="keyword">new</span> BatchCount(), <span class="number">5</span>)</div><div class="line">        .shuffleGrouping(<span class="string">"spout"</span>);</div><div class="line">builder.setBolt(<span class="string">"sum"</span>, <span class="keyword">new</span> UpdateGlobalCount())</div><div class="line">        .globalGrouping(<span class="string">"partial-count"</span>);</div></pre></td></tr></table></figure>
<p><strong>2.关键点</strong></p>
<ul>
<li>一个拓扑里只有一个Transactional Spout，其实现是由一个单线程的Coordinator Spout + 多个Emitter Bolt组成。利用Storm的ACK Framework机制，判断一个batch是否执行完成</li>
<li>Committer Bolt 可以有多个，需要收到Transactional Spout的commit信息才会执行commit</li>
</ul>
<p>####2. Storm Trident Topologies<br>storm 1.1的版本中，引入新的Trident API解决exactly-once，这是transactional topologies的升级版本。API的易用性改善，exactly-once也是采用事务机制</p>
<p><strong>1.exactly once</strong></p>
<ul>
<li>Tuples are processed as small batches 采用micor-batch机制</li>
<li>Each batch of tuples is given a unique id called the “transaction id” (txid). If the batch is replayed, it is given the exact same txid. 每个batch有唯一的batchid</li>
<li>State updates are ordered among batches. That is, the state updates for batch 3 won’t be applied until the state updates for batch 2 have succeeded. 按txid顺序提交</li>
</ul>
<p><strong>2.trident example</strong><br><a href="https://github.com/lgrcyanny/LearningStorm/blob/master/src/main/scala/com/learning/storm/TridentTest.scala" target="_blank" rel="external">github example</a></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> topology = <span class="keyword">new</span> <span class="type">TridentTopology</span>()</div><div class="line"><span class="comment">// define spout</span></div><div class="line"><span class="keyword">val</span> spout = <span class="keyword">new</span> <span class="type">FixedBatchSpout</span>(<span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">"sentence"</span>), <span class="number">3</span>,</div><div class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">"the cow jumped over the moon"</span>),</div><div class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">"the man went to the store and bought some candy"</span>),</div><div class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">"four score and seven years ago"</span>),</div><div class="line">    <span class="keyword">new</span> <span class="type">Values</span>(<span class="string">"how many apples can you eat"</span>))</div><div class="line">  spout.setCycle(<span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> wordsCount: <span class="type">TridentState</span> = topology.newStream(<span class="string">"wordsSpout"</span>, spout)</div><div class="line">    .each(<span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">"sentence"</span>), <span class="keyword">new</span> <span class="type">Split</span>(), <span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">"word"</span>))</div><div class="line">    .groupBy(<span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">"word"</span>))</div><div class="line">    .persistentAggregate(<span class="keyword">new</span> <span class="type">MemoryMapState</span>.<span class="type">Factory</span>(), <span class="keyword">new</span> <span class="type">Count</span>(), <span class="keyword">new</span> <span class="type">Fields</span>(<span class="string">"count"</span>))</div><div class="line">    .parallelismHint(<span class="number">6</span>)</div></pre></td></tr></table></figure>
<p>###<strong>总结</strong></p>
<p>Storm里为了exacly once，需要做到：</p>
<ul>
<li>源端可重放</li>
<li>batch要有唯一的txid</li>
<li>commit时按顺序提交，类似事务的两阶段提交</li>
</ul>
<hr>







]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对Spark Streaming接触比较多，主要关注的是streaming的准确性方面的需求, 忙了快半年，不禁想问为什么需要在exactly-once上花费这么多时间呢。streaming和batch的处理逻辑有什么区别呢？我觉得streaming更适合一些简单的过滤，能在100ms以内能算完的逻辑，而这些逻辑用batch也可以算完，为什么要streaming呢？用户们更希望的是更快。如果batch也能满足低延迟的需求，streaming系统就不需要了。而问题是为什么我们需要一个单独的streaming系统？&lt;br&gt;
    
    </summary>
    
    
      <category term="spark streaming" scheme="http://www.cyanny.com/tags/spark-streaming/"/>
    
  </entry>
  
  <entry>
    <title>Set Up Apache Storm On Mac In 10min</title>
    <link href="http://www.cyanny.com/2017/04/10/set-up-storm-on-mac-in-10min/"/>
    <id>http://www.cyanny.com/2017/04/10/set-up-storm-on-mac-in-10min/</id>
    <published>2017-04-10T12:19:23.000Z</published>
    <updated>2017-04-10T12:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Storm is a great real time streaming system. Recently, my project is about spark streaming. I want to learn storm either to know more about streaming system. Okay, let’s fire up.<br>Today I tried to install storm cluster on my local mac.<br>It was easy to install. It will cost you about 10min.</p>
<a id="more"></a>
<h2 id="1-install-zookeeper"><a href="#1-install-zookeeper" class="headerlink" title="1. install zookeeper"></a>1. install zookeeper</h2><ul>
<li>download <a href="http://www.apache.org/dyn/closer.cgi/zookeeper/" target="_blank" rel="external">zookeeper-3.4.9</a></li>
<li>configure conf/zoo.cfg as follows:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># The number of milliseconds of each tick</div><div class="line">tickTime=2000</div><div class="line"># The number of ticks that the initial</div><div class="line"># synchronization phase can take</div><div class="line">initLimit=10</div><div class="line"># The number of ticks that can pass between</div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line"># the directory where the snapshot is stored.</div><div class="line"># do not use /tmp for storage, /tmp here is just</div><div class="line"># replace it as your local dir</div><div class="line">dataDir=/Users/lgrcyanny/Codelab/zookeeper/zookeeper-3.4.9/zkdata</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2181</div></pre></td></tr></table></figure>
<h2 id="2-install-storm"><a href="#2-install-storm" class="headerlink" title="2. install storm"></a>2. install storm</h2><ul>
<li>download <a href="http://storm.apache.org/downloads.html" target="_blank" rel="external">latest storm 1.1.0</a></li>
<li>configure conf/storm.yaml as follows:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">storm.zookeeper.servers:</div><div class="line">    - &quot;localhost&quot;</div><div class="line">#storm.zookeeper.port:2181</div><div class="line"></div><div class="line">storm.local.dir: &quot;/Users/lgrcyanny/Codelab/storm/apache-storm-1.1.0/storm-local&quot;</div><div class="line"></div><div class="line">#</div><div class="line"># nimbus.seeds: [&quot;host1&quot;, &quot;host2&quot;, &quot;host3&quot;]</div><div class="line">#</div><div class="line">nimbus.seeds: [&quot;localhost&quot;]</div><div class="line"></div><div class="line">supervisor.slots.ports:</div><div class="line">    - 6700</div><div class="line">    - 6701</div><div class="line">    - 6702</div><div class="line">    - 6703</div></pre></td></tr></table></figure>
<p>to understand these config, please refer to: <a href="http://storm.apache.org/releases/1.1.0/Setting-up-a-Storm-cluster.html" target="_blank" rel="external">Setting-up-a-Storm-cluster.html</a></p>
<h2 id="3-start-stom"><a href="#3-start-stom" class="headerlink" title="3. start stom"></a>3. start stom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># start nimbus</div><div class="line">./bin/storm nimbus</div><div class="line"># start supervisor for workers</div><div class="line">./bin/storm supervisor</div><div class="line"># start ui</div><div class="line">./bin/storm ui</div></pre></td></tr></table></figure>
<p>open <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>, you will see storm started:<br><img src="http://wx1.sinaimg.cn/large/761b7938ly1fehv2miunpj21kw0ps0we.jpg" alt="start storm"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Storm is a great real time streaming system. Recently, my project is about spark streaming. I want to learn storm either to know more about streaming system. Okay, let’s fire up.&lt;br&gt;Today I tried to install storm cluster on my local mac.&lt;br&gt;It was easy to install. It will cost you about 10min.&lt;/p&gt;
    
    </summary>
    
    
      <category term="apache storm" scheme="http://www.cyanny.com/tags/apache-storm/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Logistic Regression</title>
    <link href="http://www.cyanny.com/2017/03/25/machine-learning-logistic-regression/"/>
    <id>http://www.cyanny.com/2017/03/25/machine-learning-logistic-regression/</id>
    <published>2017-03-25T13:48:51.000Z</published>
    <updated>2017-03-25T07:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Logistic Regression is for classification problem, and the predication value is fixed descrete values, such as 1 for positive or 0 for negative. The essence of logistic regression is:</p>
<ul>
<li>hypothesis function is sigmoid function</li>
<li>cost function: J(theta)</li>
<li>gradient descent and algorithms</li>
<li>advantanced optimization with regularization to solve overfitting problem.<a id="more"></a>
<h2 id="Basics-about-logistic-regression"><a href="#Basics-about-logistic-regression" class="headerlink" title="Basics about logistic regression"></a>Basics about logistic regression</h2>hypothesis function = 1 / (1 + exp(-htheta(x))),<br>where htheta(x) = theta’ <em> x(theta’ is transpose theta)<br><img src="http://ww2.sinaimg.cn/mw690/761b7938jw1f2rxxio8x0j20v80nit9x.jpg" alt="Sigmoid Function or Logistic Function"><br>htheta(x) mean <em>*Probalitiy that y=1, given x parameterized by theta P(y=1 | x; theta)</em></em>,<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> htheta(x) &gt;= <span class="number">0.5</span>, then y = <span class="number">1</span></div><div class="line"><span class="keyword">if</span> htheta(x) &lt; <span class="number">0.5</span>, then y = <span class="number">0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Descision-Boundary"><a href="#Descision-Boundary" class="headerlink" title="Descision Boundary"></a>Descision Boundary</h2><p><img src="http://ww3.sinaimg.cn/mw690/761b7938jw1f2rxxhyf4ij20v00ngtbs.jpg" alt="descision boundary"><br>Our goal is the calculate theta, can classify our traing data with descision boundary.<br>In the example, the traning data can be classified into 2 categories by a straight line.<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (theta'x) &gt;= <span class="number">0</span>, then htheta(x) &gt;= <span class="number">0.5</span>, then y = <span class="number">1</span></div><div class="line"><span class="keyword">if</span> (theta'x) &lt; <span class="number">0</span>, then htheta(x) &lt; <span class="number">0.5</span>, then y = <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h2 id="Cost-function-implementation"><a href="#Cost-function-implementation" class="headerlink" title="Cost function implementation"></a>Cost function implementation</h2><p>For the assignment of week3, predicate the adimission by university with 2 exams grade data.<br>I optimize the implementation with vectoriaztion</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[J, grad]</span> = <span class="title">costFunction</span><span class="params">(theta, X, y)</span></span></div><div class="line"><span class="comment">%COSTFUNCTION Compute cost and gradient for logistic regression</span></div><div class="line"><span class="comment">%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the</span></div><div class="line"><span class="comment">%   parameter for logistic regression and the gradient of the cost</span></div><div class="line"><span class="comment">%   w.r.t. to the parameters.</span></div><div class="line"></div><div class="line"><span class="comment">% Initialize some useful values</span></div><div class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></div><div class="line"></div><div class="line"><span class="comment">% You need to return the following variables correctly</span></div><div class="line">J = <span class="number">0</span>;</div><div class="line">grad = <span class="built_in">zeros</span>(<span class="built_in">size</span>(theta));</div><div class="line"></div><div class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line"><span class="comment">% Instructions: Compute the cost of a particular choice of theta.</span></div><div class="line"><span class="comment">%               You should set J to the cost.</span></div><div class="line"><span class="comment">%               Compute the partial derivatives and set grad to the partial</span></div><div class="line"><span class="comment">%               derivatives of the cost w.r.t. each parameter in theta</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">% Note: grad should have the same dimensions as theta</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">% Predications: h_theta(x)</span></div><div class="line">predications = sigmoid(X * theta);</div><div class="line">cost_items = y .* <span class="built_in">log</span>(predications) + (<span class="number">1</span> - y) .* <span class="built_in">log</span>(<span class="number">1</span> - predications);</div><div class="line">J = (<span class="number">-1</span> / m) * sum(cost_items);</div><div class="line"></div><div class="line">grad = (<span class="number">1</span> / m) * (X' * (hypothesis - y));</div><div class="line"></div><div class="line"><span class="comment">% =============================================================</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Cost-function-with-regularization"><a href="#Cost-function-with-regularization" class="headerlink" title="Cost function with regularization"></a>Cost function with regularization</h2><p>Regularzation is for overfitting problem.</p>
<ul>
<li>underfit: not fit the training data, with high bias between predications and actual value</li>
<li>Just Right: great fit</li>
<li>Overfitting:  often with too many features, not so much traning data, fit traing data well, but with hight variance, predict new data not very well</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[J, grad]</span> = <span class="title">costFunctionReg</span><span class="params">(theta, X, y, lambda)</span></span></div><div class="line"><span class="comment">%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization</span></div><div class="line"><span class="comment">%   J = COSTFUNCTIONREG(theta, X, y, lambda) computes the cost of using</span></div><div class="line"><span class="comment">%   theta as the parameter for regularized logistic regression and the</span></div><div class="line"><span class="comment">%   gradient of the cost w.r.t. to the parameters.</span></div><div class="line"></div><div class="line"><span class="comment">% Initialize some useful values</span></div><div class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></div><div class="line"></div><div class="line"><span class="comment">% You need to return the following variables correctly</span></div><div class="line">J = <span class="number">0</span>;</div><div class="line">grad = <span class="built_in">zeros</span>(<span class="built_in">size</span>(theta));</div><div class="line"></div><div class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line"><span class="comment">% Instructions: Compute the cost of a particular choice of theta.</span></div><div class="line"><span class="comment">%               You should set J to the cost.</span></div><div class="line"><span class="comment">%               Compute the partial derivatives and set grad to the partial</span></div><div class="line"><span class="comment">%               derivatives of the cost w.r.t. each parameter in theta</span></div><div class="line">hypothesis = sigmoid(X * theta);</div><div class="line">cost_items = (y .* <span class="built_in">log</span>(hypothesis)) + (<span class="number">1</span> - y) .* <span class="built_in">log</span>(<span class="number">1</span> - hypothesis);</div><div class="line"><span class="comment">% don't penalize theta0</span></div><div class="line">reg_theta = [<span class="number">0</span>; theta(<span class="number">2</span>:length(theta))];</div><div class="line">J = (<span class="number">-1</span> / m) * sum(cost_items) + (lambda / (<span class="number">2</span> * m)) * sum(reg_theta .^ <span class="number">2</span>);</div><div class="line"><span class="comment">%grad = (1 / m) * sum((predications - y) .* X)' + (lambda / m) * penalize_theta;</span></div><div class="line">grad = (<span class="number">1</span> / m) * (X' * (hypothesis - y)) + (lambda / m) * reg_theta;</div><div class="line"></div><div class="line"><span class="comment">% =============================================================</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>the lambda for regularization can’t be too large:</p>
<ul>
<li>large lamba will got very small theta value, and underfit.</li>
<li>small lambda will got large theta velue, and overfit.</li>
<li>the lambda for the exerise is 1</li>
</ul>
<h2 id="Github-assignments"><a href="#Github-assignments" class="headerlink" title="Github assignments"></a>Github assignments</h2><p><a href="https://github.com/lgrcyanny/MachineLearningCoursera/tree/master/assignments/ex2-logistic-regression" target="_blank" rel="external">Week 3 Assignments</a></p>
<h2 id="Write-on-the-last"><a href="#Write-on-the-last" class="headerlink" title="Write on the last"></a>Write on the last</h2><p>After one year, I learn the logistic regression again. Last week, Andrew NG left Baidu. Maybe, these great people thought Baidu is not worth to fight for. Now I still decidated on a Spark project and focus on Spark Streaming. As team leader, I am bearing a great burden and is stressful. It’s a great chance to train my leadership. I am also wondering next opportunity. Learning Machine Learning is right and worth to do. Anyway, even though mist is on the path, just go forward and fight~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logistic Regression is for classification problem, and the predication value is fixed descrete values, such as 1 for positive or 0 for negative. The essence of logistic regression is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hypothesis function is sigmoid function&lt;/li&gt;
&lt;li&gt;cost function: J(theta)&lt;/li&gt;
&lt;li&gt;gradient descent and algorithms&lt;/li&gt;
&lt;li&gt;advantanced optimization with regularization to solve overfitting problem.
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://www.cyanny.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>binary search algorithm in scala</title>
    <link href="http://www.cyanny.com/2017/02/21/binary-search-algorithm/"/>
    <id>http://www.cyanny.com/2017/02/21/binary-search-algorithm/</id>
    <published>2017-02-21T01:29:49.000Z</published>
    <updated>2017-08-28T07:30:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>One day, I wanted to use binary search in one of my feature in my project. My friend said the algorithm was not easy to implement bug free. I did’t believe that. I spent 10min to write it.</p>
<a id="more"></a>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span></span>(list: <span class="type">Array</span>[<span class="type">Int</span>], start: <span class="type">Int</span>, end: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</div><div class="line">   <span class="keyword">if</span> (start &lt;= end) &#123;</div><div class="line">     <span class="keyword">val</span> middle = (end - start) / <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> (list(middle) == x) &#123;</div><div class="line">       <span class="type">Some</span>(middle)</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list(middle) &gt; x) &#123;</div><div class="line">       search(list, middle + <span class="number">1</span>, end, x)</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">       search(list, start, middle - <span class="number">1</span>, x)</div><div class="line">     &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     <span class="type">None</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">   <span class="keyword">val</span> list = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</div><div class="line">   println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">5</span>))</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Ooh, definitly my code has bug, yes I admitted that it was not very easy to implement binary search bug free.<br>I revised it.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span></span>(list: <span class="type">Array</span>[<span class="type">Int</span>], start: <span class="type">Int</span>, end: <span class="type">Int</span>, x: <span class="type">Int</span>): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</div><div class="line">    <span class="keyword">if</span> (start &lt;= end) &#123;</div><div class="line">      <span class="keyword">val</span> middle = (end - start) / <span class="number">2</span> + start <span class="comment">// bug 1, without plus start</span></div><div class="line">      <span class="keyword">if</span> (list(middle) == x) &#123;</div><div class="line">        <span class="type">Some</span>(middle)</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list(middle) &gt; x) &#123;   <span class="comment">// bug2, when middle bigger than x, not search middle+1,end</span></div><div class="line">        search(list, start, middle - <span class="number">1</span>, x)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        search(list, middle + <span class="number">1</span>, end, x)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="type">None</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> list = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</div><div class="line">    println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">5</span>))</div><div class="line">    println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">11</span>))</div><div class="line">    println(search(list, <span class="number">0</span>, list.size - <span class="number">1</span>, <span class="number">8</span>))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">output:</div><div class="line">Some(4)</div><div class="line">None</div><div class="line">Some(7)</div></pre></td></tr></table></figure>
<p>It was an interesting problem. I should tain my programming skills more.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One day, I wanted to use binary search in one of my feature in my project. My friend said the algorithm was not easy to implement bug free. I did’t believe that. I spent 10min to write it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.cyanny.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>My Booklist and Reservations for 2017</title>
    <link href="http://www.cyanny.com/2017/01/22/booklist-for-2017/"/>
    <id>http://www.cyanny.com/2017/01/22/booklist-for-2017/</id>
    <published>2017-01-22T02:18:09.000Z</published>
    <updated>2017-03-05T02:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直没有写关于2016的回顾，有很多方面吧。2016年发生很多事儿的一年，对于技术上的发展也有了新的思考，搞技术不再是死磕某种工具、算法或bug，其实本质上是为了解决问题或者做更好的产品。虽然我做的不是具体的产品而是底层的工具和平台，但这些工具的出口也是依赖”pillar application”, 多想想也是好处的。</p>
<p>2016工作忙，读的书没有很多，但想想扎克伯克比我们还忙一年能挑战23本书确实很牛，其实自己的时间管理是不太到位的，大部分周末都懒散睡觉或者出去逛街了，回归2016年，读的书们：<a id="more"></a></p>
<ul>
<li><strong>“Programming in scala, 2nd”</strong></li>
</ul>
<p>第一次啃一本大部头英文书883页，我都没有勇气打印出来，看的电子版，目前2017年初，走到第703页，成功在望。看完这个书，对scala的理解和应用，已经超过我的C++和Java技能了</p>
<ul>
<li><strong>Spark源码解析, 许鹏著</strong></li>
</ul>
<p>如果你问我学spark该看哪本书，我不会给你推荐这个的。不是说它不好，而是应该好好看官方doc. 不过这个书对我理解spark还是带来了很大帮助，但是spark1.0系列的，只能对着spark1.6和spark2.0的源码看，然后看看当年的大神们怎么设计的。许鹏的书里贴了一些关键代码，虽然贴代码占页数有点不厚道，但书叫源码解析所以也就忍了</p>
<ul>
<li><strong>Python Tutorial</strong></li>
</ul>
<p>我想学python很久了，这个Tutorial我看了好多遍，其实真正到实际应用中，我才真正学会了python</p>
<ul>
<li><strong>深入理解Java虚拟机</strong></li>
</ul>
<p>JVM的虚拟机调优部分看了，还有很多没看完，用到再查</p>
<ul>
<li><strong>spark的各种论文，PPT等</strong></li>
</ul>
<p>论文比较分散，有spark sql, spark rdd, spark streaming等，各种PPT也比较分散</p>
<ul>
<li><strong>人间词话</strong></li>
</ul>
<p>有时候看看诗，心里很开心。比如年终遇到一些事儿的时候喜欢一句诗：”天长水阔知何处”，心里那个纠结</p>
<ul>
<li><strong>Dunes: 沙丘，英文版</strong></li>
</ul>
<p>科幻大神的书，挑战了英文文学，虽然磕磕绊绊看完了，但现在我可以自信的看完大部头的英文原版文学书啦。之前看过英文的哈利波特，安德游戏，觉得比较幼稚没看下去。沙丘是比较对我胃口的一本</p>
<ul>
<li><strong>倚天屠龙记</strong></li>
</ul>
<p>我童年在教科书和教辅中度过，这么好的书这么大了才看，真心停不下来</p>
<ul>
<li><strong>百万富翁，Mark Twain, 英文版</strong></li>
</ul>
<p>喜欢反转的剧情，喜欢Mark Twain的文笔</p>
<ul>
<li><strong>各种博客，news</strong></li>
</ul>
<p>我手机里有将近30个news app，我是多爱看news，喜欢的包括Business Insider, Hack News, QZ.com, 36氪，钛媒体，推酷等，一般好的news分析我放到pocket里。当然还喜欢听喜马拉雅的段子。再觉得其实看news没有看书好，多看书好</p>
<p>2017年啦，上面还有programming in scala, 人间词话还没看完，新的书又来啦，虽然写打算我不一定看，但列一下我的打算吧：</p>
<ul>
<li>机器学习Coursera课程</li>
</ul>
<p>机器学习，AI这么火，我2017年要把这个课程学完</p>
<ul>
<li>Creativity, Inc. Overcoming the Unseen Forces That Stand in the Way of True Inspiration</li>
<li>从0到1</li>
<li>make users awesome</li>
<li>platform revolution</li>
<li>奇点系列：<a href="https://book.douban.com/series/27014" target="_blank" rel="external">https://book.douban.com/series/27014</a></li>
<li>各种科幻和悬疑发现中</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直没有写关于2016的回顾，有很多方面吧。2016年发生很多事儿的一年，对于技术上的发展也有了新的思考，搞技术不再是死磕某种工具、算法或bug，其实本质上是为了解决问题或者做更好的产品。虽然我做的不是具体的产品而是底层的工具和平台，但这些工具的出口也是依赖”pillar application”, 多想想也是好处的。&lt;/p&gt;
&lt;p&gt;2016工作忙，读的书没有很多，但想想扎克伯克比我们还忙一年能挑战23本书确实很牛，其实自己的时间管理是不太到位的，大部分周末都懒散睡觉或者出去逛街了，回归2016年，读的书们：
    
    </summary>
    
    
      <category term="Learning" scheme="http://www.cyanny.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Scala Collections</title>
    <link href="http://www.cyanny.com/2016/11/07/scala-collections/"/>
    <id>http://www.cyanny.com/2016/11/07/scala-collections/</id>
    <published>2016-11-07T02:09:10.000Z</published>
    <updated>2017-03-05T02:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>In scala there are many fancy collections with great utilities. Here are some key notes for scala collections which did a great help to me.<br><a id="more"></a></p>
<h1 id="Collections-Hierarchy"><a href="#Collections-Hierarchy" class="headerlink" title="Collections Hierarchy"></a>Collections Hierarchy</h1><p><img src="http://ww1.sinaimg.cn/mw1024/761b7938jw1f9jbrdeugkj20ku0q041j.jpg" alt="collection hierarchy"></p>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Collections have two kinds:</p>
<pre><code>- mutable collections
- immutable collections
</code></pre><h2 id="Immutable-Collections"><a href="#Immutable-Collections" class="headerlink" title="Immutable Collections"></a>Immutable Collections</h2><ul>
<li><p>Lists are finite immutable sequences. They provide constant-time access to their first element as well as the rest of the list</p>
</li>
<li><p>A stream is like a list except that its elements are computed lazily. Because of this, a stream can be infinitely long. for example:</p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> s = <span class="number">1</span> #:: <span class="number">2</span> #:: <span class="number">3</span> #:: <span class="type">Stream</span>.empty</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span></span>(m: <span class="type">Int</span>, n: <span class="type">Int</span>): <span class="type">Stream</span>[<span class="type">Int</span>] = m #:: fib(n, m + n)</div></pre></td></tr></table></figure>
<ul>
<li><p>Vectors are a new collection type in Scala 2.8 that give efficient access to elements beyond the head.</p>
<ul>
<li>Access to any elements of a vector take only “effectively constant time,” as defined below.</li>
<li>shallow trees</li>
<li>when only one level, store 32 elements in an array</li>
<li>if lager than 32, grow to 2 levels, each node in level 2 has 32 elements, and level 1 store 32 pointers, now level 2 has 2^10 elements</li>
<li>level 3 has 2^ 15 elements</li>
<li>to access an element, the complexity is log32(N)</li>
<li>Vector have very decent random access performance</li>
<li>The default implementation to immutable IndexedSeq</li>
</ul>
</li>
<li><p>Stack</p>
<ul>
<li>first-in-last-out</li>
<li>you can use ArrayBuffer to implement a Stack<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> emtpyStack = <span class="type">Stack</span>.empty</div><div class="line"><span class="keyword">val</span> hasOne = emptyStack.push(<span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Immutable queues</p>
</li>
<li><p>Ranges</p>
  <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> range = <span class="number">1</span> to <span class="number">10</span></div></pre></td></tr></table></figure>
</li>
<li><p>Hash Tries</p>
<ul>
<li>Hash tries4 are a standard way to implement immutable sets and maps efficiently.</li>
</ul>
</li>
<li><p>RedBlackTrees</p>
<ul>
<li>Red-black trees are a form of balanced binary trees where some nodes are designated “red” and others “black.”</li>
<li>TreeSet</li>
<li>TreeMap</li>
<li>default implementation for SortedSet</li>
</ul>
</li>
<li><p>Immutable bit sets<br><img src="http://ww2.sinaimg.cn/mw690/761b7938jw1f9jc4ydow0j20r208276p.jpg" alt="bit set example"></p>
<ul>
<li>Operations on bit sets are very fast. Testing for inclusion takes constant time. Adding an item to the set takes time proportional to the number of Longs in the bit set’s array, which is typically a small number.</li>
</ul>
</li>
<li><p>ListMap</p>
<ul>
<li>The only possible difference is if the map is for some reason constructed in such a way that the first elements in the list are selected much more often than the other elements.</li>
</ul>
</li>
</ul>
<h2 id="Mutable-Collections"><a href="#Mutable-Collections" class="headerlink" title="Mutable Collections"></a>Mutable Collections</h2><ul>
<li><p>Array buffer: operations simply access and modify the underlying array.</p>
</li>
<li><p>List Buffer: A list buffer is like an array buffer except that it uses a linked list internally instead of an array.</p>
<ul>
<li>you plan to convert the buffer to a list once it is built up, use a list buffer instead of an array buffer.</li>
</ul>
</li>
<li><p>StringBuilder:  a string builder is useful for building strings</p>
</li>
<li><p>LinkedList: Linked lists are mutable sequences that consist of nodes that are linked with next pointer</p>
<ul>
<li>use  LinkedList.empty.isEmpty for empty list</li>
<li>linked lists are best operated on sequen- tially. In addition, linked lists make it easy to insert an element or linked list into another linked list.</li>
</ul>
</li>
<li><p>Double Linked List: The main benefit of that additional link is that it makes element removal very fast</p>
</li>
<li><p>Mutable List:</p>
<ul>
<li>A MutableList consists of a single linked list together with a pointer that refers to the terminal empty node of that list.</li>
<li>The default implementation for LinearSeq</li>
</ul>
</li>
<li><p>Queue</p>
<ul>
<li>the dequeue method will just remove the head element from the queue and return it</li>
</ul>
</li>
<li><p>Array Sequences</p>
<ul>
<li>A class for polymorphic arrays of elements that’s represented internally by an array of objects</li>
<li>Array sequences are mutable sequences of fixed size that store their elements internally in an Array[AnyRef]</li>
</ul>
</li>
<li><p>Stack</p>
<ul>
<li>It works exactly the same as the immutable version except that modifications happen in place</li>
</ul>
</li>
<li><p>ArrayStack</p>
<ul>
<li>ArrayStack is an alternative implementation of a mutable stack, which is backed by an Array that gets resized as needed</li>
<li>It provides fast indexing and is generally slightly more efficient for most operations than a normal mutable stack.</li>
</ul>
</li>
<li><p>HashTable</p>
<ul>
<li>A hash table stores its elements in an underlying array, placing each item at a position in the array determined by the hash code of that item.</li>
<li>As a result, the default mutable map and set types in Scala are based on hash tables.</li>
<li>HashMap, HashSet implements with hash tables in array</li>
<li>Iteration over a hash table is not guaranteed to occur in any particular order.<ul>
<li>To get a guaranteed iteration order, use a linked hash map or set instead of a regular one.</li>
<li>Iteration over such a collection is always in the same order that the elements were initially added.</li>
</ul>
</li>
</ul>
</li>
<li><p>Weak Hash Maps</p>
<ul>
<li>A weak hash map is a special kind of hash map in which the garbage collector does not follow links from the map to the keys stored in it</li>
<li>This means that a key and its associated value will disappear from the map if there is no other reference to that key</li>
<li>Weak hash maps are useful for tasks such as caching, where you want to re-use an expensive function’s result if the function is called again on the same key</li>
<li>Weak hash maps in Scala are implemented as a wrapper of an underlying Java implementation, java.util.WeakHashMap.</li>
</ul>
</li>
<li><p>Concurrent Maps</p>
<ul>
<li>A concurrent map can be accessed by several threads at once.</li>
<li>Currently, its only implementation is Java’s java.util.concurrent.ConcurrentMap</li>
</ul>
</li>
<li><p>BitSet</p>
<ul>
<li>Mutable bit sets are slightly more efficient at updating than immutable ones, because they don’t have to copy around Longs that haven’t changed.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In scala there are many fancy collections with great utilities. Here are some key notes for scala collections which did a great help to me.&lt;br&gt;
    
    </summary>
    
    
      <category term="Scala" scheme="http://www.cyanny.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>春江花月夜</title>
    <link href="http://www.cyanny.com/2016/09/27/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C/"/>
    <id>http://www.cyanny.com/2016/09/27/春江花月夜/</id>
    <published>2016-09-27T01:35:59.000Z</published>
    <updated>2017-03-05T02:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>有人说张若虚的这首诗很值得背诵下来<br><a id="more"></a></p>
<h2 id="春江花月夜"><a href="#春江花月夜" class="headerlink" title="春江花月夜"></a>春江花月夜</h2><hr>
<blockquote>
<p>春江潮水连海平，海上明月共潮生。<br>滟滟随波千万里，何处春江无月明！<br>江流宛转绕芳甸，月照花林皆似霰;<br>空里流霜不觉飞，汀上白沙看不见。<br>江天一色无纤尘，皎皎空中孤月轮。<br>江畔何人初见月？江月何年初照人？<br>人生代代无穷已，江月年年只相似。<br>不知江月待何人，但见长江送流水。<br>白云一片去悠悠，青枫浦上不胜愁。<br>谁家今夜扁舟子？何处相思明月楼？<br>可怜楼上月徘徊，应照离人妆镜台。<br>玉户帘中卷不去，捣衣砧上拂还来。<br>此时相望不相闻，愿逐月华流照君。<br>鸿雁长飞光不度，鱼龙潜跃水成文。<br>昨夜闲潭梦落花，可怜春半不还家。<br>江水流春去欲尽，江潭落月复西斜。<br>斜月沉沉藏海雾，碣石潇湘无限路。<br>不知乘月几人归，落月摇情满江树。</p>
<hr>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有人说张若虚的这首诗很值得背诵下来&lt;br&gt;
    
    </summary>
    
    
      <category term="诗话" scheme="http://www.cyanny.com/tags/%E8%AF%97%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Eight Queens Problem In Scala</title>
    <link href="http://www.cyanny.com/2016/09/27/eight-queens-problem-in-scala/"/>
    <id>http://www.cyanny.com/2016/09/27/eight-queens-problem-in-scala/</id>
    <published>2016-09-27T01:15:28.000Z</published>
    <updated>2017-03-05T02:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have dedicated in <strong>Programming in Scala</strong> for about 4 months. My work is busy, but I can’t give up reading more books.<br>Scala is a fabulous language, both object oriented and functional.<br>Eight qeens problem can be expressed in scala easily and concise.<br><a id="more"></a></p>
<h2 id="Eight-Queens-Problem"><a href="#Eight-Queens-Problem" class="headerlink" title="Eight Queens Problem"></a>Eight Queens Problem</h2><p>Given a standard chess-board, place eight queens such that no queen is in check from any other (a queen can check another piece if they are on the same column, row, or diagonal)</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>The problem in scala is recursively.</p>
<ol>
<li><p>First each solution is a List[(Row, Column)]</p>
<pre><code>- Each element is a coordinated, the queen position in each row
- The coordicate for row k comes first, followed by row `k-1`, `k-2`, ... 0
</code></pre></li>
<li><p>Use a Set[List[Row, Column]], represent all solutions</p>
</li>
<li>To place next <code>k+1</code> qeen, we iterate all solutions, if match the condition, yield another list</li>
</ol>
<h2 id="Lets-run-the-code"><a href="#Lets-run-the-code" class="headerlink" title="Lets run the code"></a>Lets run the code</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * the coordinates of the queen in row k comes first in each List[(ROW, Column)], followed</div><div class="line">    * by k -1, k - 2, ..., 0 and so on</div><div class="line">    *</div><div class="line">    * @param n</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">queens</span></span>(n: <span class="type">Int</span>): <span class="type">Set</span>[<span class="type">List</span>[(<span class="type">Row</span>, <span class="type">Column</span>)]] = &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeQueen</span></span>(k: <span class="type">Int</span>): <span class="type">Set</span>[<span class="type">List</span>[(<span class="type">Row</span>, <span class="type">Column</span>)]] = &#123;</div><div class="line">      <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="type">Set</span>(<span class="type">List</span>())</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> &#123;</div><div class="line">          queens &lt;- placeQueen(k - <span class="number">1</span>)</div><div class="line">          column &lt;- <span class="number">0</span> until n</div><div class="line">          queen = (k, column)</div><div class="line">          <span class="keyword">if</span> isSafe(queen, queens)</div><div class="line">        &#125; <span class="keyword">yield</span> queen :: queens</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSafe</span></span>(queen: (<span class="type">Row</span>, <span class="type">Column</span>), queens: <span class="type">List</span>[(<span class="type">Row</span>, <span class="type">Column</span>)]): <span class="type">Boolean</span> = &#123;</div><div class="line">      queens.forall &#123; placedQueen =&gt;</div><div class="line">        placedQueen._1 != queen._1 &amp;&amp;</div><div class="line">          placedQueen._2 != queen._2 &amp;&amp;</div><div class="line">          (<span class="type">Math</span>.abs(placedQueen._1 - queen._1) !=</div><div class="line">            <span class="type">Math</span>.abs(placedQueen._2 - queen._2))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    placeQueen(n - <span class="number">1</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="Github-Link"><a href="#Github-Link" class="headerlink" title="Github Link"></a>Github Link</h2><p><a href="https://github.com/lgrcyanny/ScalaPractice/blob/master/ProgrammingInScala/src/main/scala/com/chapter23/EightQueens.scala" target="_blank" rel="external">Eight Queens</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/lgrcyanny/ScalaPractice.git</div><div class="line"></div><div class="line">mvn clean package</div><div class="line"></div><div class="line">cd ProgrammingInScala</div><div class="line"></div><div class="line">scala -cp target/programming-in-scala-1.0-SNAPSHOT.jar com.chapter23.EightQueens</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have dedicated in &lt;strong&gt;Programming in Scala&lt;/strong&gt; for about 4 months. My work is busy, but I can’t give up reading more books.&lt;br&gt;Scala is a fabulous language, both object oriented and functional.&lt;br&gt;Eight qeens problem can be expressed in scala easily and concise.&lt;br&gt;
    
    </summary>
    
    
      <category term="Scala" scheme="http://www.cyanny.com/tags/scala/"/>
    
      <category term="Algorithm" scheme="http://www.cyanny.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Neural Networks</title>
    <link href="http://www.cyanny.com/2016/04/17/machine-learning-neural-networks/"/>
    <id>http://www.cyanny.com/2016/04/17/machine-learning-neural-networks/</id>
    <published>2016-04-17T13:29:20.000Z</published>
    <updated>2017-08-28T14:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This week is about the mysterious Neural Networks. The courses in this week just explain the basics about Neural Networks.</p>
<h2 id="What-is-Neural-Networks"><a href="#What-is-Neural-Networks" class="headerlink" title="What is Neural Networks"></a>What is Neural Networks</h2><p>It’s a technique to train our data based on how human brains works. A simple Neural Network has:</p>
<ul>
<li>input layer</li>
<li>hidden layer</li>
<li>output layer</li>
</ul>
<p>We use Neural NetWorks to make classification and regression.<br>We use sigmoid function the map data from input layer to hidden layer then the output layer, the function is called activation function.<br><a id="more"></a><br><img src="http://ww3.sinaimg.cn/mw690/761b7938jw1f3019b35a2j21380kcn1d.jpg" alt="Neural Network"></p>
<p>In Neural Network, we add bias unit, x0, a1 to do calculate.<br>With Neural Network, we build more complex hypothesis function.<br><img src="http://ww4.sinaimg.cn/mw690/761b7938jw1f301cv572fj214o0m2teg.jpg" alt="Neural Network"></p>
<p>To play with neural network, you can try google’s open source <a href="http://playground.tensorflow.org/#activation=tanh&amp;batchSize=10&amp;dataset=circle&amp;regDataset=reg-plane&amp;learningRate=0.03&amp;regularizationRate=0&amp;noise=0&amp;networkShape=4,2&amp;seed=0.28657&amp;showTestData=false&amp;discretize=false&amp;percTrainData=50&amp;x=true&amp;y=true&amp;xTimesY=false&amp;xSquared=false&amp;ySquared=false&amp;cosX=false&amp;sinX=false&amp;cosY=false&amp;sinY=false&amp;collectStats=false&amp;problem=classification" target="_blank" rel="external">tensorflow</a></p>
<h2 id="Handwritten-Digital-Classification"><a href="#Handwritten-Digital-Classification" class="headerlink" title="Handwritten Digital Classification"></a>Handwritten Digital Classification</h2><p>This week’s assignment is to do multi classification on handwritten recognize.</p>
<p><strong>Do multi classification with one-vs-all logistic regression</strong><br>For handwritens in 10 lables: 0~9, we do 10 regression regression to calculate 10 group of theta. And then make 10 predications base on these 10 group of theta, choose the lable with max hypothesis value（probaility value）</p>
<p><strong>1. Cost function</strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[J, grad]</span> = <span class="title">lrCostFunction</span><span class="params">(theta, X, y, lambda)</span></span></div><div class="line">reg_theta = [<span class="number">0</span>;theta(<span class="number">2</span>:end)];</div><div class="line">predictions = sigmoid(X * theta);</div><div class="line">J = (<span class="number">-1</span> / m) * sum((y .* <span class="built_in">log</span>(predictions) + (<span class="number">1</span> - y) .* <span class="built_in">log</span>(<span class="number">1</span> - predictions))) + (lambda / (<span class="number">2</span> * m)) * sum(reg_theta .^ <span class="number">2</span>);</div><div class="line">grad = (<span class="number">1</span> / m) * (X' * (predictions - y)) + (lambda / m) * reg_theta;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><strong>2. OneVsAll</strong><br>make 10 classifications<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[all_theta]</span> = <span class="title">oneVsAll</span><span class="params">(X, y, num_labels, lambda)</span></span></div><div class="line"><span class="comment">% Some useful variables</span></div><div class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>);</div><div class="line">n = <span class="built_in">size</span>(X, <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">% You need to return the following variables correctly</span></div><div class="line">all_theta = <span class="built_in">zeros</span>(num_labels, n + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">% Add ones to the X data matrix</span></div><div class="line">X = [ones(m, <span class="number">1</span>) X];</div><div class="line"></div><div class="line"><span class="comment">% Note: For this assignment, we recommend using fmincg to optimize the cost</span></div><div class="line"><span class="comment">%       function. It is okay to use a for-loop (for c = 1:num_labels) to</span></div><div class="line"><span class="comment">%       loop over the different classes.</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">%       fmincg works similarly to fminunc, but is more efficient when we</span></div><div class="line"><span class="comment">%       are dealing with large number of parameters.</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:num_labels</div><div class="line">    initial_theta = <span class="built_in">zeros</span>(n + <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    options = optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">50</span>);</div><div class="line">    <span class="comment">% theta is a column vector</span></div><div class="line">    <span class="comment">% Run fmincg to obtain the optimal theta</span></div><div class="line">    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == <span class="built_in">i</span>), lambda)), ...</div><div class="line">                    initial_theta, options);</div><div class="line">    all_theta(<span class="built_in">i</span>, :) = theta';</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><strong>3. PredictOneVsAll</strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span> = <span class="title">predictOneVsAll</span><span class="params">(all_theta, X)</span></span></div><div class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>);</div><div class="line">num_labels = <span class="built_in">size</span>(all_theta, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">% You need to return the following variables correctly</span></div><div class="line">p = <span class="built_in">zeros</span>(<span class="built_in">size</span>(X, <span class="number">1</span>), <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">% Add ones to the X data matrix</span></div><div class="line">X = [ones(m, <span class="number">1</span>) X];</div><div class="line">predictions = X * all_theta';</div><div class="line"><span class="comment">% calculate max of each row</span></div><div class="line">[max_predictions, p] = max(predictions, [], <span class="number">2</span>);</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>The logistic has great accurracy, about 95% in this case, but neural network will have higher accuracy, about 97%.</p>
<h2 id="Neural-Forward-Propagation-algorithm"><a href="#Neural-Forward-Propagation-algorithm" class="headerlink" title="Neural Forward Propagation algorithm"></a>Neural Forward Propagation algorithm</h2><p>In the assignment, it build hypothesis function with 3 layers neural network.<br>The predications implementation</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span> = <span class="title">predict</span><span class="params">(Theta1, Theta2, X)</span></span></div><div class="line"><span class="comment">%PREDICT Predict the label of an input given a trained neural network</span></div><div class="line"><span class="comment">%   p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the</span></div><div class="line"><span class="comment">%   trained weights of a neural network (Theta1, Theta2)</span></div><div class="line"></div><div class="line"><span class="comment">% Useful values</span></div><div class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>);</div><div class="line">num_labels = <span class="built_in">size</span>(Theta2, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">% You need to return the following variables correctly </span></div><div class="line">p = <span class="built_in">zeros</span>(<span class="built_in">size</span>(X, <span class="number">1</span>), <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line"><span class="comment">% Instructions: Complete the following code to make predictions using</span></div><div class="line"><span class="comment">%               your learned neural network. You should set p to a </span></div><div class="line"><span class="comment">%               vector containing labels between 1 to num_labels.</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">% Hint: The max function might come in useful. In particular, the max</span></div><div class="line"><span class="comment">%       function can also return the index of the max element, for more</span></div><div class="line"><span class="comment">%       information see 'help max'. If your examples are in rows, then, you</span></div><div class="line"><span class="comment">%       can use max(A, [], 2) to obtain the max for each row.</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="comment">% Theta1 is 25 * 401, X is 5000 * 401</span></div><div class="line">X = [ones(m, <span class="number">1</span>) X];</div><div class="line"><span class="comment">% z2 is 5000 * 25</span></div><div class="line">z2 = X * Theta1';</div><div class="line">a2 = sigmoid(z2);</div><div class="line"><span class="comment">% a2 with bias unit is 5000 * 26</span></div><div class="line">a2 = [ones(m, <span class="number">1</span>) a2];</div><div class="line"></div><div class="line"><span class="comment">% Theta2 is 10 * 26</span></div><div class="line"><span class="comment">% z3 is 5000 * 10</span></div><div class="line">z3 = a2 * Theta2';</div><div class="line">a3 = sigmoid(z3);</div><div class="line">[max_valid, p] = max(a3, [], <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">% =========================================================================</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>My question is:</p>
<ul>
<li>how to train the Theta1, Theta2</li>
<li>how to decide how many units in hidden layer<br>In the later course, I think NG will explain it. Next week, I will learn backpropagation algorithm.</li>
</ul>
<h2 id="My-assignment"><a href="#My-assignment" class="headerlink" title="My assignment"></a>My assignment</h2><p><a href="https://github.com/lgrcyanny/MachineLearningCoursera/tree/master/assignments" target="_blank" rel="external">Week Assignments</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This week is about the mysterious Neural Networks. The courses in this week just explain the basics about Neural Networks.&lt;/p&gt;
&lt;h2 id=&quot;What-is-Neural-Networks&quot;&gt;&lt;a href=&quot;#What-is-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;What is Neural Networks&quot;&gt;&lt;/a&gt;What is Neural Networks&lt;/h2&gt;&lt;p&gt;It’s a technique to train our data based on how human brains works. A simple Neural Network has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input layer&lt;/li&gt;
&lt;li&gt;hidden layer&lt;/li&gt;
&lt;li&gt;output layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use Neural NetWorks to make classification and regression.&lt;br&gt;We use sigmoid function the map data from input layer to hidden layer then the output layer, the function is called activation function.&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://www.cyanny.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Linear Regression</title>
    <link href="http://www.cyanny.com/2016/04/04/machine-learning-linear-regression/"/>
    <id>http://www.cyanny.com/2016/04/04/machine-learning-linear-regression/</id>
    <published>2016-04-04T07:55:31.000Z</published>
    <updated>2017-03-05T02:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been learning the coursera Machine Learning Course by Andrew Ng for two weeks now. Machine Learning is fun and different. For the coursera assignment1 of linear regression, I want to share something.<br><a id="more"></a></p>
<h2 id="Using-matlab"><a href="#Using-matlab" class="headerlink" title="Using matlab"></a>Using matlab</h2><p>I think matlab is better than octave, please use coursera account. <a href="https://www.coursera.org/learn/machine-learning/supplement/rANSM/installing-matlab" target="_blank" rel="external">Install matlab</a></p>
<h2 id="Octave-Install"><a href="#Octave-Install" class="headerlink" title="Octave Install"></a>Octave Install</h2><p>The course use Octave/Matlab for programming practice. I learned octave basics in two days. I don’t have too much time, can just doing these homework in weekends. For Octavel installed on mac, I encounter some problems and solved it. Now octave is 4.2.0, I think ocatve is better now.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install octave</div></pre></td></tr></table></figure>
<p>if you encounter some problem, you can solve it as follows:</p>
<ul>
<li>brew update &amp;&amp; brew upgrade</li>
<li>brew tap –repair</li>
<li>brew install octave</li>
<li>install xserver(seems no need to install)<ul>
<li><a href="http://www.xquartz.org/" target="_blank" rel="external">http://www.xquartz.org/</a></li>
</ul>
</li>
<li>font can’t find when plot<ul>
<li>export FONTCONFIG_PATH=/opt/X11/lib/X11/fontconfig</li>
</ul>
</li>
<li>can’t plot unknown or ambiguous terminal type; type just ‘set terminal’ for a list<ul>
<li>brew uninstall gnuplot</li>
<li>download and install aquaterm: <a href="https://sourceforge.net/projects/aquaterm/?source=typ_redirect" target="_blank" rel="external">https://sourceforge.net/projects/aquaterm/?source=typ_redirect</a></li>
<li>brew install gnuplot –with-aquaterm –with-qt4</li>
</ul>
</li>
<li>add start config to /usr/local/share/octave/site/m/startup/octaverc<ul>
<li>PS1(‘&gt;&gt; ‘)</li>
</ul>
</li>
</ul>
<h2 id="Gradient-Descent-Algorithm"><a href="#Gradient-Descent-Algorithm" class="headerlink" title="Gradient Descent Algorithm"></a>Gradient Descent Algorithm</h2><p>Implementing gradient desenct algorithm in vectorization style was more efficient than iteration algorithm. Here is my implementation:<br>No for loop looks elegant.</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta, J_history]</span> = <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, num_iters)</span></span></div><div class="line"><span class="comment">%GRADIENTDESCENT Performs gradient descent to learn theta</span></div><div class="line"><span class="comment">%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by</span></div><div class="line"><span class="comment">%   taking num_iters gradient steps with learning rate alpha</span></div><div class="line"></div><div class="line"><span class="comment">% Initialize some useful values</span></div><div class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></div><div class="line">J_history = <span class="built_in">zeros</span>(num_iters, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> iter = <span class="number">1</span>:num_iters</div><div class="line"></div><div class="line">    <span class="comment">% ====================== YOUR CODE HERE ======================</span></div><div class="line">    <span class="comment">% Instructions: Perform a single gradient step on the parameter vector</span></div><div class="line">    <span class="comment">%               theta.</span></div><div class="line">    <span class="comment">%</span></div><div class="line">    <span class="comment">% Hint: While debugging, it can be useful to print out the values</span></div><div class="line">    <span class="comment">%       of the cost function (computeCost) and gradient here.</span></div><div class="line">    <span class="comment">%</span></div><div class="line">    predications = X * theta;</div><div class="line">    errors = predications - y; <span class="comment">% m by 1 vector</span></div><div class="line">    <span class="comment">% sum_delta = (alpha / m) * sum(errors .* X, 1); % sum by column, which is 1 by n + 1 matrix</span></div><div class="line">    <span class="comment">% transpose X, no need sum(errors .* X, 1) here</span></div><div class="line">    sum_delta = (alpha / m) .* (X' * errors);</div><div class="line">    theta = theta - sum_delta;</div><div class="line"></div><div class="line">    <span class="comment">% ============================================================</span></div><div class="line"></div><div class="line">    <span class="comment">% Save the cost J in every iteration</span></div><div class="line">    J_history(iter) = computeCost(X, y, theta);</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><strong>Another implementation by my wwzyhao</strong><br>[by wwzyhao]<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta, J_history]</span> = <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, num_iters)</span></span></div><div class="line"><span class="comment">%GRADIENTDESCENT Performs gradient descent to learn theta</span></div><div class="line"><span class="comment">%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by</span></div><div class="line"><span class="comment">%   taking num_iters gradient steps with learning rate alpha</span></div><div class="line"></div><div class="line"><span class="comment">% Initialize some useful values</span></div><div class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></div><div class="line">J_history = <span class="built_in">zeros</span>(num_iters, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> iter = <span class="number">1</span>:num_iters</div><div class="line"></div><div class="line">    delta = <span class="built_in">zeros</span>(<span class="built_in">size</span>(X, <span class="number">2</span>), <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:m</div><div class="line">        x = (X(<span class="built_in">j</span>,:))';</div><div class="line">        delta = delta + (<span class="number">1</span> / m) * (theta' * x - y(<span class="built_in">j</span>)) * x;</div><div class="line">    <span class="keyword">end</span>;</div><div class="line"></div><div class="line">    theta = theta - alpha * delta;</div><div class="line"></div><div class="line">    <span class="comment">% ============================================================</span></div><div class="line"></div><div class="line">    <span class="comment">% Save the cost J in every iteration</span></div><div class="line">    J_history(iter) = computeCost(X, y, theta);</div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>Not better than me! haha~</p>
<h2 id="My-assignments-on-github"><a href="#My-assignments-on-github" class="headerlink" title="My assignments on github"></a>My assignments on github</h2><p><a href="https://github.com/lgrcyanny/MachineLearningCoursera/tree/master/assignments/ex1/ex1" target="_blank" rel="external">Assignments1</a><br>For submition errors, please refer to<a href="https://learner.coursera.help/hc/en-us/community/posts/204693179-linear-regression-submit-error" target="_blank" rel="external">Jacob Middag</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been learning the coursera Machine Learning Course by Andrew Ng for two weeks now. Machine Learning is fun and different. For the coursera assignment1 of linear regression, I want to share something.&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://www.cyanny.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Programming In Scala Overview Key Note</title>
    <link href="http://www.cyanny.com/2016/03/06/programming-in-scala-overview-key-note/"/>
    <id>http://www.cyanny.com/2016/03/06/programming-in-scala-overview-key-note/</id>
    <published>2016-03-06T10:01:42.000Z</published>
    <updated>2017-03-05T02:27:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>过去半年里，都在忙着spark相关的项目，主要的编程语言是scala，前些年主要用的是c++，刚转到scala上时，有点不适应函数式编程语言的思想，现在已经半年多过去了，觉得scala真的是awesome，简洁有力的表达，整合了functional programming和object programming，并且设计良好。<br>去年上了Martin Odersky的编程课<i>Functional Programming In Scala</i>, 觉得挺感兴趣，学习了很多，想在scala语言上看得更多，更深入些，我选择了Scala的权威著作<a href="http://www.artima.com/shop/programming_in_scala_2ed" target="_blank" rel="external">Programming In Scala</a>, 虽然这书有快900页，但我想挑战下，与其每天泡在各种新闻资讯里，还不如看看书泡在书里。每天都看看书，觉得挺好，有些笔记和心得就写在博客里，毕竟工作忙，写博客的时间很少，但我想还是应该多总结和留下写想法。之后阅读Spark的源码，我也会坚持写下些东西，看过了和写下来总还是不一样嘛。<br><a id="more"></a></p>
<h1 id="Scala-Overview"><a href="#Scala-Overview" class="headerlink" title="Scala Overview"></a>Scala Overview</h1><h2 id="1-Scala-is-a-Scalable-Language"><a href="#1-Scala-is-a-Scalable-Language" class="headerlink" title="1. Scala is a Scalable Language"></a>1. Scala is a Scalable Language</h2><ul>
<li>Scala is a blend of object-oriented and functional programing language</li>
<li>Grow new types, such as BigInt</li>
<li>Grow new control structures, such as actor based api</li>
</ul>
<h2 id="2-What-makes-scala-scalable"><a href="#2-What-makes-scala-scalable" class="headerlink" title="2. What makes scala scalable"></a>2. What makes scala scalable</h2><p>fusion object-oriented and functional programming</p>
<ul>
<li><strong>Object-Oriented</strong><ul>
<li>it combines data with operations under a formalized interface. So objects have a lot to do with language scalability: the same techniques apply to the construction of small as well as large program</li>
<li>Scala is an object-oriented language in pure form: every value is an object and every operation is a method call.</li>
<li>An example is Scala’s traits. Traits are like interfaces in Java, but they can also have method implementations and even fields</li>
</ul>
</li>
<li><strong>Functional</strong><ul>
<li>Functional programming fundation was raid in lonzo Church’s lambda calculus, in the 1930. The first functional programming language is Lisp, created in the late 1950s, other functional programming languages are Scheme, SML, Erlang, Haskell, OCaml, and F#.</li>
<li>Functional programming two main ideas:<ul>
<li>Firstly, <strong>functional are first class values</strong><ul>
<li>You can pass functions as arguments to other functions, return them as results from functions, or store them in variables. You can also define a function inside another function, just as you can define an integer value inside a function</li>
<li>Functions that are first-class values provide a convenient means for abstracting over operations and creating new control structures.</li>
</ul>
</li>
<li>Secondly, <strong>operations of a program should map input values to output values rather than change data in place.</strong><ul>
<li>methods should not have any side effects<ul>
<li><strong>Referentially transparent</strong>, which means that for any given input the method call could be replaced by its result without affecting the program’s semantics</li>
</ul>
</li>
<li>encourage immutable data structures and referentially transparent methods</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-Why-chooose-scala"><a href="#3-Why-chooose-scala" class="headerlink" title="3. Why chooose scala?"></a>3. Why chooose scala?</h2><ul>
<li><strong>Compatibility</strong><ul>
<li>compile to JVM bytecode, run on jvm</li>
<li>compatible with java types, reuse java types</li>
<li>implicity conversions : support string.toInt,</li>
<li>java can call scala code</li>
</ul>
</li>
<li><strong>Brevity, scala is concise</strong><ul>
<li>reduction on list</li>
<li>Avoid biolerplate in java, such as avoid class getter and setter, default constructor</li>
<li>Type inference</li>
<li>tools in library, can be used as trait</li>
</ul>
</li>
<li><p><strong>High-level abstractions</strong></p>
<ul>
<li><p>Scala helps you manage complexity by letting you raise the level of abstraction in the interfaces you design and use.<br>For example, The Scala code treats the same strings as higher-level sequences of characters that can be queried with predicates</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> tr = str.exists(_.isUpper)</div></pre></td></tr></table></figure>
</li>
<li><p>Functional literals are lightweight</p>
</li>
</ul>
</li>
<li><strong>Advanced static type system</strong><ul>
<li>it allows you to parameterize types with generics, to combine types using intersections, and to hide details of types using abstract types.</li>
<li>Although some argues that static typed language is verbose and not flexible, In scala  <strong>verbosity</strong> is avoided through type inference and <strong>flexibility</strong> is gained through pattern matching and several new ways to write and compose types.</li>
<li>Advantages of static typing system:<ul>
<li>Verifiable properties: Static type systems can prove the absence of certain run-time errors. Reduce the number of unit tests.</li>
<li>Safe refactoring : make changes to a codebase with a high degree of confidence</li>
<li>Documentation: Static types are program documentation that is checked by the compiler for correctness.<ul>
<li>Scala has a very sophisticated type inference system that lets you omit almost all type information that’s usually considered annoying</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-Scala-roots"><a href="#4-Scala-roots" class="headerlink" title="4.Scala roots"></a>4.Scala roots</h2><p>Although only a few features of Scala are genuinely new; most have been already applied in some form in other languages. Its design models many languages, such as SmallTalk, Ruby, Algol, Simula, OCaml, Haskell etc.<br>Scala’s innovations come primarily from how its constructs are put together<br>Scala is also not the first language to integrate functional and object-oriented programming, although it probably goes furthest in this direction</p>
<p>Given Scala’s innovations:</p>
<ul>
<li>its abstract types provide a more object-oriented alternative to generic types,</li>
<li>its traits allow for flexible component assembly,</li>
<li>its extractors provide a representation-independent way to do pattern matching.</li>
</ul>
<h2 id="5-Starting-Programming"><a href="#5-Starting-Programming" class="headerlink" title="5. Starting Programming"></a>5. Starting Programming</h2><p><a href="https://github.com/lgrcyanny/ScalaPractice/tree/master/ProgrammingInScala" target="_blank" rel="external">Programming In Scala</a><br>读书的时候写写代码，都是书里的例子，用maven构建的scala progject。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去半年里，都在忙着spark相关的项目，主要的编程语言是scala，前些年主要用的是c++，刚转到scala上时，有点不适应函数式编程语言的思想，现在已经半年多过去了，觉得scala真的是awesome，简洁有力的表达，整合了functional programming和object programming，并且设计良好。&lt;br&gt;去年上了Martin Odersky的编程课&lt;i&gt;Functional Programming In Scala&lt;/i&gt;, 觉得挺感兴趣，学习了很多，想在scala语言上看得更多，更深入些，我选择了Scala的权威著作&lt;a href=&quot;http://www.artima.com/shop/programming_in_scala_2ed&quot;&gt;Programming In Scala&lt;/a&gt;, 虽然这书有快900页，但我想挑战下，与其每天泡在各种新闻资讯里，还不如看看书泡在书里。每天都看看书，觉得挺好，有些笔记和心得就写在博客里，毕竟工作忙，写博客的时间很少，但我想还是应该多总结和留下写想法。之后阅读Spark的源码，我也会坚持写下些东西，看过了和写下来总还是不一样嘛。&lt;br&gt;
    
    </summary>
    
    
      <category term="Scala" scheme="http://www.cyanny.com/tags/scala/"/>
    
      <category term="Language" scheme="http://www.cyanny.com/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>Learning Akka</title>
    <link href="http://www.cyanny.com/2015/10/07/learning-akka/"/>
    <id>http://www.cyanny.com/2015/10/07/learning-akka/</id>
    <published>2015-10-07T13:54:48.000Z</published>
    <updated>2017-03-05T02:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了scala，主要是跟着<strong>Functional Programming in Scala</strong>的课程学习的，scala主要的用处还是在spark上，关于spark也看了一些源码，处于继续探索中。</p>
<p>并发时的消息通信是处理spark这样的分布式系统的关键。spark主要依赖scala社区的akka进行消息通讯。在spark1.2的代码中可以看到很多actor的影子，然而spark1.4中，都是封装为EndPoint，但Actor的思想和模式还在。</p>
<p>基于Actor的消息通讯模型是akka的核心。Akka为处理并发、容错和可扩展性的分布式问题提供了一套基于Actor模型的库。并发的消息通讯中，抽象是关键的方面。Actor模型是1973年由Carl Hewitt在论文”Actor Model of Computation- Scalable Robust Information Systems”中提出, 后被应用于爱立信公司研发的Elang语言，爱立信公司应用Actor模型开发了高并发和可靠的通信系统。</p>
<a id="more"></a>
<p>###1. Akka的重要的4个方面<br><em>Actor</em></p>
<ul>
<li>为处理并发，并行问题提供了简单和high-level的抽象</li>
<li>event-driven的异步非阻塞通讯</li>
<li>轻量的actor进程，几百万个actor只占heap 1G左右</li>
</ul>
<p><em>容错性</em></p>
<ul>
<li>具有”let-it-crash”语意的监督者层级结构</li>
<li>不同的监督者层级可以分布在不同的JVM中，提供真正容错的系统</li>
<li>系统可以自我恢复，never stop</li>
</ul>
<p><em>寻址透明</em></p>
<ul>
<li>Actor在Akka内部采用统一的寻址方式，屏蔽底层细节</li>
<li>Actor是纯消息传递，且为异步消息传递</li>
</ul>
<p><em>可持久化</em></p>
<ul>
<li>Actor收到的消息会被存储在邮箱中，收到的消息可以被持久化，actor可以被迁移到其他节点，重新回复并重启。</li>
</ul>
<p>总之，Akka的设计围绕着以下三个核心展开：</p>
<ul>
<li>Scale-up 并发</li>
<li>Scal-out(Remoting)，可扩展性</li>
<li>容错性</li>
</ul>
<p>###2. 永远不变的HelloWorld<br><a href="https://github.com/lgrcyanny/LearningAkka" target="_blank" rel="external">Hello World</a><br><em>Greeter</em><br>Actor必须实现receive方法, 通过hello world例子可以看到actor的入门很简单。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> akka.actor.<span class="type">Actor</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Greeter</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Greet</span></span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Done</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= &#123;</div><div class="line">    <span class="keyword">case</span> msg<span class="meta">@Greeter</span>.<span class="type">Greet</span> =&gt;</div><div class="line">      println(<span class="string">s"Hello Akka, receive <span class="subst">$msg</span>"</span>)</div><div class="line">      sender() ! <span class="type">Greeter</span>.<span class="type">Done</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>HelloWorld Actor</em><br>负责启动Greeter Actor<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">preStart</span> </span>= &#123;</div><div class="line">    <span class="keyword">val</span> greeter = context.actorOf(<span class="type">Props</span>[<span class="type">Greeter</span>], <span class="string">"greeter"</span>)</div><div class="line">    greeter ! <span class="type">Greeter</span>.<span class="type">Greet</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Greeter</span>.<span class="type">Done</span> =&gt;</div><div class="line">      context.stop(self)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>Main启动</em></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    akka.<span class="type">Main</span>.main(<span class="type">Array</span>(classOf[<span class="type">HelloWorld</span>].getName))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Akka的主要学习还是看官方的文档，akka的特定用法看api很不错。<br>以上就是akka的入门的一些学习吧，写的仓促，如有不对的地方还请指正。最近很忙，也没能好好写博客。<br>akka的深入篇，会持续更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了scala，主要是跟着&lt;strong&gt;Functional Programming in Scala&lt;/strong&gt;的课程学习的，scala主要的用处还是在spark上，关于spark也看了一些源码，处于继续探索中。&lt;/p&gt;
&lt;p&gt;并发时的消息通信是处理spark这样的分布式系统的关键。spark主要依赖scala社区的akka进行消息通讯。在spark1.2的代码中可以看到很多actor的影子，然而spark1.4中，都是封装为EndPoint，但Actor的思想和模式还在。&lt;/p&gt;
&lt;p&gt;基于Actor的消息通讯模型是akka的核心。Akka为处理并发、容错和可扩展性的分布式问题提供了一套基于Actor模型的库。并发的消息通讯中，抽象是关键的方面。Actor模型是1973年由Carl Hewitt在论文”Actor Model of Computation- Scalable Robust Information Systems”中提出, 后被应用于爱立信公司研发的Elang语言，爱立信公司应用Actor模型开发了高并发和可靠的通信系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Akka" scheme="http://www.cyanny.com/tags/akka/"/>
    
      <category term="Scala" scheme="http://www.cyanny.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>位排序和快排</title>
    <link href="http://www.cyanny.com/2015/05/04/bitsort-ant-qsort/"/>
    <id>http://www.cyanny.com/2015/05/04/bitsort-ant-qsort/</id>
    <published>2015-05-04T13:57:53.000Z</published>
    <updated>2017-03-05T02:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>这已经不是一个新话题了，但是从开始实现一个C++位排序和快排，我还是花费了2个多小时，这里就记下自己的一点点体会啦。</p>
<p>首先，题目来自《编程珠玑》第一章，主要是做位排序，同时和快排做比较：</p>
<p>1. 实现位逻辑运算，实现位向量，并用该位向量实现1,000,000个数字的排序，数字最大是10,000,000</p>
<p>2. 实现1000,000个数字的快排序</p>
<p>3. 实现生成小于n且没有重复的k个整数，这里n=10,000,000, k = 1,000,000</p>
<a id="more"></a>
<h3 id="1-位排序"><a href="#1-位排序" class="headerlink" title="1. 位排序"></a>1. 位排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;iostream&amp;gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;string&amp;gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;fstream&amp;gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 这里以32位的int来实现位向量，初始化的开销可能会比较大</span></div><div class="line"><span class="keyword">class</span> BitVector &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BitVector(<span class="keyword">int</span> size) &#123;</div><div class="line">        <span class="keyword">int</span> n = (<span class="number">1</span> + (size / BITS_PER_WORD));</div><div class="line">        buffer = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; ++i) &#123;</div><div class="line">            buffer[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ~BitVector() &#123;</div><div class="line">        <span class="keyword">delete</span>[] buffer;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        buffer[(i &amp;gt;&amp;gt; SHIFT)] |= <span class="number">1</span> &amp;lt;&amp;lt; (i &amp;amp; MASK);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        buffer[(i &amp;gt;&amp;gt; SHIFT)] &amp;amp;= ~(<span class="number">1</span> &amp;lt;&amp;lt; (i &amp;amp; MASK));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> buffer[(i &amp;gt;&amp;gt; SHIFT)] &amp;amp; (<span class="number">1</span> &amp;lt;&amp;lt; (i &amp;amp; MASK));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span>* buffer;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BITS_PER_WORD = <span class="number">32</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MASK = <span class="number">0x1f</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> SHIFT = <span class="number">5</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> BitVector::BITS_PER_WORD;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> BitVector::MASK;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> BitVector::SHIFT;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 输入是要排序的文件名，同时需要给出输出文件名称</span></div><div class="line">    <span class="comment">// range是数字的范围</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">int</span> range,</div><div class="line">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;amp; input_file_name,</div><div class="line">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;amp; output_file_name) &#123;</div><div class="line">        <span class="function">BitVector <span class="title">bits_vector</span><span class="params">(range)</span></span>;</div><div class="line">        <span class="built_in">std</span>::<span class="function">ifstream <span class="title">fin</span><span class="params">(input_file_name)</span></span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fin &amp;gt;&amp;gt; i) &#123;</div><div class="line">            bits_vector.<span class="built_in">set</span>(i);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">std</span>::<span class="function">ofstream <span class="title">fout</span><span class="params">(output_file_name)</span></span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; range; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (bits_vector.test(i)) &#123;</div><div class="line">                fout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</div><div class="line">    Solution s;</div><div class="line">    <span class="keyword">int</span> range = <span class="number">10000000</span>;</div><div class="line">    s.sort(range, &amp;quot;numbers_input.txt&amp;quot;, &amp;quot;numbers_output.txt&amp;quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-Quick-Sort"><a href="#2-Quick-Sort" class="headerlink" title="2. Quick Sort"></a>2. Quick Sort</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;amp; input_file_name,</div><div class="line">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;amp; output_file_name) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&amp;lt;<span class="keyword">int</span>&amp;gt; arr;</div><div class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line">        <span class="built_in">std</span>::<span class="function">ifstream <span class="title">fin</span><span class="params">(input_file_name)</span></span>;</div><div class="line">        <span class="keyword">while</span>(fin &amp;gt;&amp;gt; number) &#123;</div><div class="line">            arr.push_back(number);</div><div class="line">        &#125;</div><div class="line">        qsort(&amp;amp;arr, <span class="number">0</span>, arr.size() - <span class="number">1</span>);</div><div class="line">        <span class="built_in">std</span>::<span class="function">ofstream <span class="title">fout</span><span class="params">(output_file_name)</span></span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; arr.size(); ++i) &#123;</div><div class="line">            fout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&amp;lt;<span class="keyword">int</span>&amp;gt;* arr, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (p &amp;gt;= r) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q = partition(arr, p, r);</div><div class="line">        qsort(arr, p, q - <span class="number">1</span>);</div><div class="line">        qsort(arr, q + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&amp;lt;<span class="keyword">int</span>&amp;gt;* arr, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = p;</div><div class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (; i &amp;lt; r; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (arr-&amp;gt;at(i) &amp;lt; arr-&amp;gt;at(r)) &#123;</div><div class="line">                ++j;</div><div class="line">                <span class="built_in">std</span>::swap(arr-&amp;gt;at(i) , arr-&amp;gt;at(j));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ++j;</div><div class="line">        <span class="built_in">std</span>::swap(arr-&amp;gt;at(j) , arr-&amp;gt;at(r));</div><div class="line">        <span class="keyword">return</span> j;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="3-生成范围是-0-n-的k个随机数"><a href="#3-生成范围是-0-n-的k个随机数" class="headerlink" title="3. 生成范围是[0,n)的k个随机数"></a>3. 生成范围是[0,n)的k个随机数</h3><p>该算法首先生成顺序的n个数字，再遍历该数组，将当前索引i和 random(i, n)生成的索引对应的数字交换，保证生成不重复的随机序列，生成1000000个范围为10000000的数字5.3s可以完成</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(list, i, j)</span>:</span></div><div class="line">    tmp = list[i]</div><div class="line">    list[i] = list[j]</div><div class="line">    list[j] = tmp</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">()</span>:</span></div><div class="line">    number_limit = int(sys.argv[<span class="number">1</span>])</div><div class="line">    n = int(sys.argv[<span class="number">2</span>])</div><div class="line">    list = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number_limit):</div><div class="line">        list.append(i)</div><div class="line">    f = open(<span class="string">'numbers_input.txt'</span>, <span class="string">'w'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        random_index = random.randint(i, number_limit - <span class="number">1</span>)</div><div class="line">        swap(list, i, random_index)</div><div class="line">        f.write(str(list[i]) + <span class="string">'\n'</span>)</div><div class="line">    f.close()</div><div class="line">generate()</div></pre></td></tr></table></figure>
<h3 id="4-性能比较"><a href="#4-性能比较" class="headerlink" title="4.性能比较"></a>4.性能比较</h3><p>运行的环境是Mac OSX 10.10，内存DDR3 4G，1.8GHz Inter Core i5<br>1. 位排序总运行时间是: 3.98s, 去掉读写文件的时间，0.47s完成排序<br>2. 快排序总运行时间: 4.71s, 去掉读写文件时间，0.63s完成排序<br>总之，快排的优势在于不限制排序数字范围，位排序限定范围，性能比快排高效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这已经不是一个新话题了，但是从开始实现一个C++位排序和快排，我还是花费了2个多小时，这里就记下自己的一点点体会啦。&lt;/p&gt;
&lt;p&gt;首先，题目来自《编程珠玑》第一章，主要是做位排序，同时和快排做比较：&lt;/p&gt;
&lt;p&gt;1. 实现位逻辑运算，实现位向量，并用该位向量实现1,000,000个数字的排序，数字最大是10,000,000&lt;/p&gt;
&lt;p&gt;2. 实现1000,000个数字的快排序&lt;/p&gt;
&lt;p&gt;3. 实现生成小于n且没有重复的k个整数，这里n=10,000,000, k = 1,000,000&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.cyanny.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>查找两个排序数组的中位数</title>
    <link href="http://www.cyanny.com/2015/04/03/find-median-for-two-sorted-array/"/>
    <id>http://www.cyanny.com/2015/04/03/find-median-for-two-sorted-array/</id>
    <published>2015-04-03T14:07:01.000Z</published>
    <updated>2016-09-27T01:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目是：求两个排序数组的中位数。<br>设：两个排序的数组a[m], b[n]，求a和b数组的中位数。<br>算法是：<br>mid_a是数组a的中位数index，同理mid_b是数组b的中位数索引<br>1. 如果a[mid_a] == b[mid_b] 中位数为a[mid_a]</p>
<p>2. 如果a[mid_a] &lt; b[mid_b], 递归查找a(mid_a + 1, m - 1), b(0, mid_b)，因为a[mid_a]比较小，不可能作为下一次查询的中位数</p>
<p>3. 如果a[mid_a] &gt; b[mid_b], 递归查找a(0, mid_a), b(mid_b + 1, n - 1)，因为b[mid_b]比较小，不可能作为下一次查询的中位数</p>
<p>4. 当只少于4个元素需要查找时递归停止，merge这少于4的元素，求出中位数。这里需要考虑奇偶数的情况，只剩下2个或3个元素，不如只考虑4个简单。</p>
<p>注意：这里求上中位数，当n为奇数时，中位数是唯一的，出现位置为n/2；当n为偶数时候，存在两个中位数，数组index从0开始，位置分别为n/2 - 1（上中位数）和n/2（下中位数）。</p>
<a id="more"></a>
<p>[cpp]</p>
<p>#include &lt;iostream&gt;<br>using namespace std;</p>
<p>class Solution {<br>public:<br>  int find_median(int a[], int p, int q, int b[], int r, int s) {<br>    int size_a = q - p + 1;<br>    int size_b = s - r + 1;<br>    int total_size = size_a + size_b;<br>    if (total_size &lt;= 4) {<br>      // calcuate median for less than 4 elements<br>      int i = p;<br>      int j = r;<br>      int num = (total_size + 1) / 2;<br>      for (int k = 1; k &lt; num; k++) {<br>        // A fake merge without copying, just move index<br>        if (i &lt;= q &amp;&amp; j &lt;= s) {<br>          if (a[i] &lt;= b[j]) {<br>            ++i;<br>          } else {<br>            ++j;<br>          }<br>        } else if (i &gt; q) {<br>          ++j;<br>        } else if (j &gt; s) {<br>          ++i;<br>        }<br>      }<br>      int median = 0;<br>      if (i &lt;= q &amp;&amp; j &lt;= s) {<br>        median = a[i] &lt; b[j] ? a[i] : b[j];<br>      } else if (i &gt; q){<br>        median = b[j];<br>      } else if (j &gt; s) {<br>        median = a[i];<br>      }<br>      return median;<br>    }<br>    int mid_a = get_median_index(a, p, q);<br>    int mid_b = get_median_index(b, r, s);<br>    if (a[mid_a] == b[mid_b]) {<br>      return a[mid_a];<br>    } else if (a[mid_a] &lt; b[mid_b]) {<br>      // mid_a is less, no need to be seached later, no possible to be median<br>      return find_median(a, mid_a + 1, q, b, r, mid_b);<br>    } else {<br>      // mid_b is less, no need to be seached later, no possible to be median<br>      return find_median(a, p, mid_a, b, mid_b + 1, s);<br>    }<br>  }</p>
<p>private:<br>  int get_median_index(int a[], int p, int q) {<br>    int n = q - p + 1;<br>    int mid = n / 2;<br>    if (n % 2 == 0) {<br>      return p + mid - 1;<br>    } else {<br>      return p + mid;<br>    }<br>  }<br>};</p>
<p>int main(int argc, char const *argv[])<br>{<br>  int a[] = {5, 6, 7, 8};<br>  int m = sizeof(a) / sizeof(int);<br>  int b[] = {1, 2, 3, 4};<br>  int n = sizeof(b) / sizeof(int);<br>  Solution s;<br>  int median = s.find_median(a, 0, m - 1, b, 0, n - 1);<br>  cout &lt;&lt; median &lt;&lt; endl;<br>  return 0;<br>}<br>[/cpp]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目是：求两个排序数组的中位数。&lt;br&gt;设：两个排序的数组a[m], b[n]，求a和b数组的中位数。&lt;br&gt;算法是：&lt;br&gt;mid_a是数组a的中位数index，同理mid_b是数组b的中位数索引&lt;br&gt;1. 如果a[mid_a] == b[mid_b] 中位数为a[mid_a]&lt;/p&gt;
&lt;p&gt;2. 如果a[mid_a] &amp;lt; b[mid_b], 递归查找a(mid_a + 1, m - 1), b(0, mid_b)，因为a[mid_a]比较小，不可能作为下一次查询的中位数&lt;/p&gt;
&lt;p&gt;3. 如果a[mid_a] &amp;gt; b[mid_b], 递归查找a(0, mid_a), b(mid_b + 1, n - 1)，因为b[mid_b]比较小，不可能作为下一次查询的中位数&lt;/p&gt;
&lt;p&gt;4. 当只少于4个元素需要查找时递归停止，merge这少于4的元素，求出中位数。这里需要考虑奇偶数的情况，只剩下2个或3个元素，不如只考虑4个简单。&lt;/p&gt;
&lt;p&gt;注意：这里求上中位数，当n为奇数时，中位数是唯一的，出现位置为n/2；当n为偶数时候，存在两个中位数，数组index从0开始，位置分别为n/2 - 1（上中位数）和n/2（下中位数）。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.cyanny.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://www.cyanny.com/tags/algorithm/"/>
    
  </entry>
  
</feed>
